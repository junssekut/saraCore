local I={_VERSION="0.1.5",_AUTHOR="junssekut#4964";_CONTRIBUTORS={}}local H={}local a={}local w={}local W={}local C={}local X={}local r={}local c={}local D={}local A={}local R={}local Y={}local N={}local n={VALUE_MISMATCH="[%s] got: %s",TYPE_MISMATCH="[%s] got: %s, expected: %s"}local Z={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0",DROP_DIALOG="action|drop\n|itemID|%d";DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d",EXIT="action|quit_to_exit";TUTORIAL_POPUP_CLOSE="ftue_start_popup_close";TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1";INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d";INSERT_VEND_CONFIRM="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nsetprice|0\nchk_peritem|0\nchk_perlock|1",UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local b={SELECT_ALL="Select All";GUEST_ACCOUNT="Guest Account",EXTERNAL="External";AUTO_ACCESS="Auto Access",AUTO_RECONNECT="Auto Reconnect",AUTO_LEAVE="Auto Leave";IGNORE_GEMS="Ignore Gems"}local B=_G.getBot local t=_G.getTile local q=_G.sendPacket local l=_G.sendPacketRaw local x=_G.sleep local p=_G.connect local f=_G.request local v=_G.setBool local S=_G.removeBot local V=_G.addBot local K=_G.findItem local s=_G.getPing local M=_G.findPath local J=_G.getPlayers local F=_G.enter local P=_G.punch local e=_G.place local G=_G.collect local g=_G.wear local h=_G.findClothes local y=_G.say local L=string.format local u=math.floor local i=math.abs local d=os.date local U=os.time local O=os.difftime local z=W.isWhiteDoor local E=w.isOnline local j=N.isFailed local Q=Y.isStuck local k=assert((load(f("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local T=assert((load(f("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local o=assert((load(f("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local m local I0 local function H0(I,H)if not I then error(H or"Assertion Failed!")end return I end local function a0(I,H,a)return H0(type(H)==a,n.TYPE_MISMATCH:format(I,type(H),a))end function a.exit()q(3,Z.EXIT)while not a.isInside("exit")do x(1000)end end function N.getCaptcha()if not B()then return"unknown"end return(B()).captcha or"unknown"end function N.isFailed()return not(N.getCaptcha()):match("Solved")end function N.handleCaptcha()local I=U()disconnect()x(250)H.reconnect()return o.diff(I)end function a.warp(I,C,X,r,c)C=C or""X=X or 15 r=r or 6 c=c or 2500 a0("worldhandler:warp<world>",I,"string")a0("worldhandler:warp<id>",C,"string")a0("worldhandler:warp<limit_tries>",X,"number")a0("worldhandler:warp<after_tries>",r,"number")I=I:upper()local D=0 local A=5 while not a.isInside(I)do if not w.isOnline()then H.reconnect()end if D~=0 and D%(r*X)==0 then return false end if D%r==0 then q(3,Z.JOIN_WORLD:format(C==""and I or I..("|"..C)))end D=D+1 local W=0 while W~=A do W=W+1 x(1000)if a.isInside(I)then break end end end if I=="EXIT"or C==""then return a.isInside(I)end D=0 while W.isWhiteDoor()do if not w.isOnline()then H.reconnect()end if D~=0 and D%(r*X)==0 then return false end if D%r==0 then q(3,Z.JOIN_WORLD:format(I..("|"..C)))end D=D+1 local a=0 while a~=A do a=a+1 x(1000)if not W.isWhiteDoor()then break end end end x((A*.5)*1000)return a.isInside(I)end function a.getWorld()if not B()then return"unknown"end return(B()).world or"unknown"end function a.isInside(I)H0(type(I)=="string",n.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(I)))return a.getWorld()==I end function W.isWhiteDoor()if not B()then return false end local I=t(u((B()).x*.03125),u((B()).y*.03125))return(I and I.fg or nil)==6 end function w.getStatus(I)if not B(I or nil)then return"offline"end return(B(I or nil)).status or"offline"end function w.isOnline(I,H)return(H or w.getStatus(I or nil))=="online"end function W.calculateFloating(I,H)if(t(I,H)).flags==0 then return I,H,0,0 end local a=W.getx()for w=-1,1,2 do if I+w==a then return I,H,-w,0 end end for a=-1,1,2 do if I+a>=0 and I+a<=99 then if(t(I+a,H)).flags==0 then if not M(I+a,H)then x(500)else x(150)return I,H,-a,0 end end end end for a=-1,1,1 do for w=-2,2,2 do if(I+a>=0 and I+a<=99)and(H+w>=0 and H+w<=53)then if(t(I+a,H+w)).flags==0 then if not M(I+a,H+w)then x(500)else x(150)return I,H,-a,-w end end end end end return nil end function W.getx()if not B()then return nil end return u(((B()).x or 0)*.03125)end function W.gety()if not B()then return nil end return u(((B()).y or 0)*.03125)end function W.get()if not B()then return nil end return W.getx(),W.gety()end function W.full(I,H)a0("tilehandler:full<x>",I,"number")a0("tilehandler:full<y>",H,"number")local a=r.contains local w=table.insert local W,C,X=0,{},getObjects()for X,r in pairs(X)do if(r.x>=I*32-6 and r.x<=(I+1)*32-6)and(r.y>=H*32-2 and r.y<=(H+1)*32-2)then W=W+r.count if not a(C,r.id)then w(C,r.id)end end end return W>=3800 or#C>=20 end function Y.isStuck()return(E and E()or w.isOnline())and s()==500 end function Y.handleStuck()local I=0 local H=1 local a=15 while Y.isStuck()do if I%H==0 then p()end I=I+1 local w=0 while w~=a do w=w+1 x(1000)if w~=0 and w%5~=0 then if not Y.isStuck()then break end end end end end function H.c(I,w,W,C,X)X=X~=nil and X or false if not m or m and O(U(),m)>=10 then if j()then N.handleCaptcha()end m=U()if not I0 or I0 and O(U(),I0)>=15 then if Q()then Y.handleStuck()end I0=m end end if not E()then H.reconnect()if(a.getWorld()):match("_")then R.skipTutorial()end if I then a0("auth:c<world>",I,"string")I=I:upper()if not a.isInside(I)then a.warp(I,w or"")end if W and C then R.sfindPath(W,C)end end end if X and(W and C)then if u((B()).x*.03125)~=W or u((B()).y*.03125)~=C then if z()and(I and w)then a.warp(I,w)end M(W,C)end end end function H.reconnect(I,H,a)I=I or 8 H=H or 5 a=a~=nil and a or false local W=0 local C=a and 1 or 6 local X=a and 7 or 5 x(math.random(0,X)*1000)while not w.isOnline()do local a=w.getStatus()if a=="suspended"then return a end if a=="banned"then return a end if a=="maintenance"then return a end if a=="version update"then return a end if a=="temporary ban"then return a end if a=="onsendtoserver"then return a end if a=="aap detected"then return a end if a=="invalid email"then return a end if a=="guest error"then return a end if w.isOnline()then break end if W~=0 and W%(C*I)==0 then local I=0 local a=H*60 while I~=a do I=I+1 x(1000)if w.isOnline()then break end end if w.isOnline()then break end end if W%C==0 then p()end W=W+1 local r=0 while r~=X do r=r+1 x(1000)if w.isOnline()then break end end end return w.getStatus()end function H.login(I,a,w,W)a=a~=nil and a or false w=w or 10000 W=W~=nil and W or false a0("auth:login<credential>",I,"table")a0("auth:login<remove>",a,"boolean")a0("auth:login<delay>",w,"number")a0("auth:login<force>",W,"boolean")local C,X local r=0 local c=2 local D=10 local A=1 if a and B()then C=(B()).name while B(C)do if r>D then break end if r%c==0 then S(C)end r=r+1 x(A*1000)end end r=0 C=I.name X=I.password if C==""and X==""then C=B()and(B()).name end if not B(C)then if X==""then v(b.GUEST_ACCOUNT,true)end if I.proxy then V(C,X,I.proxy)else V(C,X)end v(b.GUEST_ACCOUNT,false)else p()end v(b.AUTO_RECONNECT,false)v(b.AUTO_LEAVE,false)if not W then local I=H.reconnect(8,5,true)x(w)return I end x(w)end function C.format(I)a0("numberutils:format<number>",I,"number")if I>=1000000 then return L("%.2fm",I*1e-006)elseif I>=1000 then return L("%.2fk",I*.001)end return tostring(I)end function C.nformat(I)a0("numberutils:nformat<number>",I,"number")local H,a=L("%0.f",I)while a~=0 do H,a=H:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return H end function X.nowIso()local I=d("!*t",U())local H=L("%d-%02d-%02dT%02d:%02d:%02dZ",I.year,I.month,I.day,I.hour,I.min,I.sec)return H end function r.contains(I,H)a0("tableutils:contains",I,"table")if type(H)=="string"then H=H:upper()end for a=1,#I,1 do local w=I[a]if type(w)=="string"then w=w:upper()end if w==H then return true end end return false end function D.collect(I,H,a)if i((B()).x-H)>96 or i((B()).y-a)>96 then return false end l({type=11;int_data=I,pos_x=H;pos_y=a})return true end function D.vend(I,H,a)if(t(H,a)).data~=I then q(2,Z.INSERT_VEND:format(H,a,I))x(1000)q(2,Z.INSERT_VEND_CONFIRM:format(H,a))else q(2,Z.UPDATE_VEND:format(H,a))end x(1500)end function A.drop(I,H)a0("inventoryhandler:drop<item_id>",I,"number")H=H or K(I)if H==0 then return end a0("inventoryhandler:drop<item_count>",H,"number")l({type=0,flags=48,pos_x=(B()).x;pos_y=(B()).y})q(2,Z.DROP_DIALOG:format(I))x(250)q(2,Z.DROP_OK:format(I,H))x(1250)end function c.random(I,H,a,w,W)I=I or 1 H=H or 1 a=a~=nil and a or false w=w~=nil and w or false W=W~=nil and W or false if not c.charset then local I=table.insert local H={}if a then for a=48,57,1 do I(H,string.char(a))end end for a=65,90,1 do I(H,string.char(a))end for a=97,122,1 do I(H,string.char(a))end c.charset=H end local C=""for I=1,I,1 do math.randomseed(((U()*H)*I)*(s()or 1))C=C..c.charset[math.random(1,#c.charset)]end if w then return C:upper()end if W then return C:lower()end return C end function c.randomi(I,H)I=I or 1 H=H or 1 if not c.charseti then local I=table.insert local H={}for a=48,57,1 do I(H,string.char(a))end c.charseti=H end local a=""for I=1,I,1 do math.randomseed(((U()*H)*I)*(s()or 1))a=a..c.charseti[math.random(#c.charseti)]end return a end function R.sfindPath(I,H)a0("botutils:sfindpath<x>",I,"number")a0("botutils:sfindpath<x>",H,"number")local a=0 local w=10 local W=M(I,H)while not W do if a>w then break end W=M(I,H)if W then break end x(100)a=a+1 end return W end function R.getGuest()if not B()then return nil end local I=J()for H=0,#I,1 do local a=I[H]if a.name:match("_")then if(a.name:match("(.+)_%d+")):upper()==(B()).name:upper()then return a.name end end end return nil end function R.skipTutorial()local I=R.getGuest()if not I then I=c.random(13)end if I:match("_")then I=I:gsub("_","")end if not(a.getWorld()):match(".+_1_.+")then return nil end q(2,Z.TUTORIAL_POPUP_CLOSE)x(200)while not R.sfindPath(86,30)do x(1000)end F()while not(a.getWorld()):match(".+_2_.+")do x(1000)end while not R.sfindPath(46,23)do x(1000)end while(t(47,23)).fg~=0 do P(1,0)x(200)end while(t(47,23)).fg==0 do e(2,1,0)x(200)end while(t(47,23)).fg~=0 do P(1,0)x(200)end while K(3)==0 do G(3)x(250)end while(t(47,23)).fg~=0 do P(1,0)x(200)end while(t(47,23)).fg==0 do e(3,1,0)x(750)end while K(10672)==0 do x(500)end while K(10672)~=0 do e(10672,1,0)x(750)end while(t(47,23)).fg==3 do P(1,0)x(200)end while K(48)==0 do G(3)x(250)end while not h(48)do g(48)x(1000)end q(3,Z.EXIT)while not a.isInside("EXIT")do x(1000)end local H=0 while not a.warp(I)do x(1000)I=I..H end while K(9640)==0 do x(200)end while K(9640)~=0 do e(9640,0,-1)x(200)end for I=0,2,1 do y(c.random(1))x(1500)end end I.Auth=H I.WorldHandler=a I.StatusHandler=w I.PacketHandler=D I.InventoryHandler=A I.TileHandler=W I.NumberUtils=C I.DateUtils=X I.TableUtils=r I.StringUtils=c I.BotUtils=R I.PingHandler=Y I.CaptchaHandler=N I.ItemDatabase=k I.Json=T I.Date=o I.AssertUtils={assertv=H0,tassertv=a0}return I