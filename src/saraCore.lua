local g={_VERSION="0.1.6",_AUTHOR="junssekut#4964",_CONTRIBUTORS={}}local r={}local h={}local t={}local Q={}local w={}local p={}local P={}local A={}local e={}local b={}local F={}local H={}local I={}local a={VALUE_MISMATCH="[%s] got: %s";TYPE_MISMATCH="[%s] got: %s, expected: %s"}local x={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0",DROP_DIALOG="action|drop\n|itemID|%d",DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit";TUTORIAL_POPUP_CLOSE="ftue_start_popup_close",TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1",INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d";INSERT_VEND_CONFIRM="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nsetprice|0\nchk_peritem|0\nchk_perlock|1";UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local Y={SELECT_ALL="Select All",GUEST_ACCOUNT="Guest Account",EXTERNAL="External";AUTO_ACCESS="Auto Access";AUTO_RECONNECT="Auto Reconnect";AUTO_LEAVE="Auto Leave";IGNORE_GEMS="Ignore Gems"}local y=_G.getBot local o=_G.getTile local u=_G.sendPacket local N=_G.sendPacketRaw local m=_G.sleep local s=_G.connect local n=_G.request local G=_G.setBool local R=_G.removeBot local S=_G.addBot local V=_G.findItem local T=_G.getPing local C=_G.findPath local D=_G.getPlayers local Z=_G.enter local L=_G.punch local z=_G.place local v=_G.collect local X=_G.wear local E=_G.findClothes local K=_G.say local W=string.format local i=math.floor local c=math.abs local d=os.date local J=os.time local O=os.difftime local k=Q.isWhiteDoor local j=t.isOnline local B=I.isFailed local U=H.isStuck local q=assert((load(n("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local f=assert((load(n("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local l=assert((load(n("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local M local gY local function rY(g,r)if not g then error(r or"Assertion Failed!")end return g end local function hY(g,r,h)return rY(type(r)==h,a.TYPE_MISMATCH:format(g,type(r),h))end function h.exit()u(3,x.EXIT)while not h.isInside("exit")do m(1000)end end function I.getCaptcha()if not y()then return"unknown"end return(y()).captcha or"unknown"end function I.isFailed()return not(I.getCaptcha()):match("Solved")end function I.handleCaptcha()local g=J()disconnect()m(250)r.reconnect()return l.diff(g)end function h.warp(g,w,p,P,A)w=w or""p=p or 15 P=P or 6 A=A or 2500 hY("worldhandler:warp<world>",g,"string")hY("worldhandler:warp<id>",w,"string")hY("worldhandler:warp<limit_tries>",p,"number")hY("worldhandler:warp<after_tries>",P,"number")g=g:upper()local e=0 local b=5 while not h.isInside(g)do if not t.isOnline()then r.reconnect()end if e~=0 and e%(P*p)==0 then return false end if e%P==0 then u(3,x.JOIN_WORLD:format(w==""and g or g..("|"..w)))end e=e+1 local Q=0 while Q~=b do Q=Q+1 m(1000)if h.isInside(g)then break end end end if g=="EXIT"or w==""then return h.isInside(g)end e=0 while Q.isWhiteDoor()do if not t.isOnline()then r.reconnect()end if e~=0 and e%(P*p)==0 then return false end if e%P==0 then u(3,x.JOIN_WORLD:format(g..("|"..w)))end e=e+1 local h=0 while h~=b do h=h+1 m(1000)if not Q.isWhiteDoor()then break end end end m((b*.5)*1000)return h.isInside(g)end function h.getWorld()if not y()then return"unknown"end return(y()).world or"unknown"end function h.isInside(g)rY(type(g)=="string",a.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(g)))return h.getWorld()==g end function Q.isWhiteDoor()if not y()then return false end local g=o(i((y()).x*.03125),i((y()).y*.03125))return(g and g.fg or nil)==6 end function t.getStatus(g)if not y(g or nil)then return"offline"end return(y(g or nil)).status or"offline"end function t.isOnline(g,r)return(r or t.getStatus(g or nil))=="online"end function Q.calculateFloating(g,r)if(o(g,r)).flags==0 then return g,r,0,0 end local h=Q.getx()for t=-1,1,2 do if g+t==h then return g,r,-t,0 end end for h=-1,1,2 do if g+h>=0 and g+h<=99 then if(o(g+h,r)).flags==0 then if not C(g+h,r)then m(500)else m(150)return g,r,-h,0 end end end end for h=-1,1,1 do for t=-2,2,2 do if(g+h>=0 and g+h<=99)and(r+t>=0 and r+t<=53)then if(o(g+h,r+t)).flags==0 then if not C(g+h,r+t)then m(500)else m(150)return g,r,-h,-t end end end end end return nil end function Q.getx()if not y()then return nil end return i(((y()).x or 0)*.03125)end function Q.gety()if not y()then return nil end return i(((y()).y or 0)*.03125)end function Q.get()if not y()then return nil end return Q.getx(),Q.gety()end function Q.full(g,r)hY("tilehandler:full<x>",g,"number")hY("tilehandler:full<y>",r,"number")local h=P.contains local t=table.insert local Q,w,p=0,{},getObjects()for p,P in pairs(p)do if(P.x>=g*32-6 and P.x<=(g+1)*32-6)and(P.y>=r*32-2 and P.y<=(r+1)*32-2)then Q=Q+P.count if not h(w,P.id)then t(w,P.id)end end end return Q>=3800 or#w>=20 end function H.isStuck()return(j and j()or t.isOnline())and T()==500 end function H.handleStuck()local g=0 local r=1 local h=15 while H.isStuck()do if g%r==0 then s()end g=g+1 local t=0 while t~=h do t=t+1 m(1000)if t~=0 and t%5~=0 then if not H.isStuck()then break end end end end end function r.c(g,t,Q,w,p)p=p~=nil and p or false if not M or M and O(J(),M)>=10 then if B()then I.handleCaptcha()end M=J()if not gY or gY and O(J(),gY)>=15 then if U()then H.handleStuck()end gY=M end end if not j()then r.reconnect()if(h.getWorld()):match("_")then F.skipTutorial()end if g then hY("auth:c<world>",g,"string")g=g:upper()if not h.isInside(g)then h.warp(g,t or"")end if Q and w then F.sfindPath(Q,w)end end end if p and(Q and w)then if i((y()).x*.03125)~=Q or i((y()).y*.03125)~=w then if k()and(g and t)then h.warp(g,t)end C(Q,w)end end end function r.reconnect(g,r,h)g=g or 8 r=r or 5 h=h~=nil and h or false local Q=0 local w=h and 1 or 6 local p=h and 7 or 5 m(math.random(0,p)*1000)while not t.isOnline()do local h=t.getStatus()if h=="suspended"then return h end if h=="banned"then return h end if h=="maintenance"then return h end if h=="version update"then return h end if h=="temporary ban"then return h end if h=="onsendtoserver"then return h end if h=="aap detected"then return h end if h=="invalid email"then return h end if h=="guest error"then return h end if t.isOnline()then break end if Q~=0 and Q%(w*g)==0 then local g=0 local h=r*60 while g~=h do g=g+1 m(1000)if t.isOnline()then break end end if t.isOnline()then break end end if Q%w==0 then s()end Q=Q+1 local P=0 while P~=p do P=P+1 m(1000)if t.isOnline()then break end end end return t.getStatus()end function r.login(g,h,t,Q)h=h~=nil and h or false t=t or 10000 Q=Q~=nil and Q or false hY("auth:login<credential>",g,"table")hY("auth:login<remove>",h,"boolean")hY("auth:login<delay>",t,"number")hY("auth:login<force>",Q,"boolean")local w,p local P=0 local A=2 local e=10 local b=1 if h and y()then w=(y()).name while y(w)do if P>e then break end if P%A==0 then R(w)end P=P+1 m(b*1000)end end P=0 w=g.name p=g.password if w==""and p==""then w=y()and(y()).name end if not y(w)then if p==""then G(Y.GUEST_ACCOUNT,true)end if g.proxy then S(w,p,g.proxy)else S(w,p)end G(Y.GUEST_ACCOUNT,false)else s()end G(Y.AUTO_RECONNECT,false)G(Y.AUTO_LEAVE,false)if not Q then local g=r.reconnect(8,5,true)m(t)return g end m(t)end function w.format(g)hY("numberutils:format<number>",g,"number")if g>=1000000 then return W("%.2fm",g*1e-006)elseif g>=1000 then return W("%.2fk",g*.001)end return tostring(g)end function w.nformat(g)hY("numberutils:nformat<number>",g,"number")local r,h=W("%0.f",g)while h~=0 do r,h=r:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return r end function p.nowIso()local g=d("!*t",J())local r=W("%d-%02d-%02dT%02d:%02d:%02dZ",g.year,g.month,g.day,g.hour,g.min,g.sec)return r end function P.contains(g,r)hY("tableutils:contains",g,"table")if type(r)=="string"then r=r:upper()end for h=1,#g,1 do local t=g[h]if type(t)=="string"then t=t:upper()end if t==r then return true end end return false end function e.collect(g,r,h)if c((y()).x-r)>96 or c((y()).y-h)>96 then return false end N({type=11,int_data=g;pos_x=r;pos_y=h})return true end function e.tvend(g,r)wrench(0,0)m(200)u(2,x.TAKE_VEND:format(g,r))m(1500)end function e.vend(g,r,h)wrench(0,0)m(200)if(o(r,h)).data~=g then u(2,x.INSERT_VEND:format(r,h,g))m(1000)u(2,x.INSERT_VEND_CONFIRM:format(r,h))else u(2,x.UPDATE_VEND:format(r,h))end m(1500)end function b.drop(g,r)hY("inventoryhandler:drop<item_id>",g,"number")r=r or V(g)if r==0 then return end hY("inventoryhandler:drop<item_count>",r,"number")N({type=0,flags=48;pos_x=(y()).x;pos_y=(y()).y})u(2,x.DROP_DIALOG:format(g))m(250)u(2,x.DROP_OK:format(g,r))m(1250)end function A.random(g,r,h,t,Q)g=g or 1 r=r or 1 h=h~=nil and h or false t=t~=nil and t or false Q=Q~=nil and Q or false if not A.charset then local g=table.insert local r={}if h then for h=48,57,1 do g(r,string.char(h))end end for h=65,90,1 do g(r,string.char(h))end for h=97,122,1 do g(r,string.char(h))end A.charset=r end local w=""for g=1,g,1 do math.randomseed(((J()*r)*g)*(T()or 1))w=w..A.charset[math.random(1,#A.charset)]end if t then return w:upper()end if Q then return w:lower()end return w end function A.randomi(g,r)g=g or 1 r=r or 1 if not A.charseti then local g=table.insert local r={}for h=48,57,1 do g(r,string.char(h))end A.charseti=r end local h=""for g=1,g,1 do math.randomseed(((J()*r)*g)*(T()or 1))h=h..A.charseti[math.random(#A.charseti)]end return h end function F.sfindPath(g,r)hY("botutils:sfindpath<x>",g,"number")hY("botutils:sfindpath<x>",r,"number")local h=0 local t=10 local Q=C(g,r)while not Q do if h>t then break end Q=C(g,r)if Q then break end m(100)h=h+1 end return Q end function F.getGuest()if not y()then return nil end local g=D()for r=0,#g,1 do local h=g[r]if h.name:match("_")then if(h.name:match("(.+)_%d+")):upper()==(y()).name:upper()then return h.name end end end return nil end function F.skipTutorial()local g=F.getGuest()if not g then g=A.random(13)end if g:match("_")then g=g:gsub("_","")end if not(h.getWorld()):match(".+_1_.+")then return nil end u(2,x.TUTORIAL_POPUP_CLOSE)m(200)while not F.sfindPath(86,30)do m(1000)end Z()while not(h.getWorld()):match(".+_2_.+")do m(1000)end while not F.sfindPath(46,23)do m(1000)end while(o(47,23)).fg~=0 do L(1,0)m(200)end while(o(47,23)).fg==0 do z(2,1,0)m(200)end while(o(47,23)).fg~=0 do L(1,0)m(200)end while V(3)==0 do v(3)m(250)end while(o(47,23)).fg~=0 do L(1,0)m(200)end while(o(47,23)).fg==0 do z(3,1,0)m(750)end while V(10672)==0 do m(500)end while V(10672)~=0 do z(10672,1,0)m(750)end while(o(47,23)).fg==3 do L(1,0)m(200)end while V(48)==0 do v(3)m(250)end while not E(48)do X(48)m(1000)end u(3,x.EXIT)while not h.isInside("EXIT")do m(1000)end local r=0 while not h.warp(g)do m(1000)g=g..r end while V(9640)==0 do m(200)end while V(9640)~=0 do z(9640,0,-1)m(200)end for g=0,2,1 do K(A.random(1))m(1500)end end g.Auth=r g.WorldHandler=h g.StatusHandler=t g.PacketHandler=e g.InventoryHandler=b g.TileHandler=Q g.NumberUtils=w g.DateUtils=p g.TableUtils=P g.StringUtils=A g.BotUtils=F g.PingHandler=H g.CaptchaHandler=I g.ItemDatabase=q g.Json=f g.Date=l g.AssertUtils={assertv=rY;tassertv=hY}return g