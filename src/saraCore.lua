local i={_VERSION="0.1.6";_AUTHOR="junssekut#4964";_CONTRIBUTORS={}}local H={}local T={}local g={}local L={}local k={}local q={}local A={}local x={}local K={}local d={}local l={}local m={}local h={}local U={}local p={VALUE_MISMATCH="[%s] got: %s";TYPE_MISMATCH="[%s] got: %s, expected: %s"}local F={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0",DROP_DIALOG="action|drop\n|itemID|%d",DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit",TUTORIAL_POPUP_CLOSE="ftue_start_popup_close",TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1";INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d",UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local f={SELECT_ALL="Select All";GUEST_ACCOUNT="Guest Account",EXTERNAL="External";AUTO_ACCESS="Auto Access",AUTO_RECONNECT="Auto Reconnect";AUTO_LEAVE="Auto Leave",IGNORE_GEMS="Ignore Gems"}local C=_G.getBot local t=_G.getTile local O=_G.sendPacket local j=_G.sendPacketRaw local E=_G.sleep local P=_G.connect local M=_G.request local D=_G.setBool local y=_G.removeBot local o=_G.addBot local w=_G.findItem local B=_G.getPing local J=_G.findPath local W=_G.getPlayers local G=_G.enter local S=_G.punch local V=_G.place local a=_G.collect local s=_G.wear local n=_G.findClothes local N=_G.say local R=string.format local I=math.floor local Q=math.abs local e=os.date local Y=os.time local Z=os.difftime local u=L.isWhiteDoor local r=g.isOnline local v=h.isFailed local c=m.isStuck local b=assert((load(M("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local X=assert((load(M("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local z=assert((load(M("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local i9 local H9 local function T9(i,H)if not i then error(H or"Assertion Failed!")end return i end local function g9(i,H,T)return T9(type(H)==T,p.TYPE_MISMATCH:format(i,type(H),T))end function T.exit()O(3,F.EXIT)while not T.isInside("exit")do E(1000)end end function h.getCaptcha()if not C()then return"unknown"end return(C()).captcha or"unknown"end function h.isFailed()return not(h.getCaptcha()):match("Solved")end function h.handleCaptcha()local i=Y()disconnect()E(250)H.reconnect()return z.diff(i)end function T.warp(i,k,q,A,x)k=k or""q=q or 15 A=A or 6 x=x or 5000 g9("worldhandler:warp<world>",i,"string")g9("worldhandler:warp<id>",k,"string")g9("worldhandler:warp<limit_tries>",q,"number")g9("worldhandler:warp<after_tries>",A,"number")i=i:upper()local K=0 local d=5 while not T.isInside(i)do if not g.isOnline()then H.reconnect()end if K~=0 and K%(A*q)==0 then return false end if K%A==0 then O(3,F.JOIN_WORLD:format(k==""and i or i..("|"..k)))end K=K+1 local L=0 while L~=d do L=L+1 E(1000)if T.isInside(i)then break end end end if i=="EXIT"or k==""then return T.isInside(i)end K=0 while L.isWhiteDoor()do if not g.isOnline()then H.reconnect()end if K~=0 and K%(A*q)==0 then return false end if K%A==0 then O(3,F.JOIN_WORLD:format(i..("|"..k)))end K=K+1 local T=0 while T~=d do T=T+1 E(1000)if not L.isWhiteDoor()then break end end end E(d)return T.isInside(i)end function T.getWorld()if not C()then return"unknown"end return(C()).world or"unknown"end function T.isInside(i)T9(type(i)=="string",p.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(i)))return T.getWorld()==i end function L.isWhiteDoor()if not C()then return false end local i=t(I((C()).x*.03125),I((C()).y*.03125))return(i and i.fg or nil)==6 end function L.getWhiteDoor()for i=0,99,1 do if(t(i,23)).fg==6 then return{x=i;y=23}end end return nil end function g.getStatus(i)if not C(i or nil)then return"offline"end return(C(i or nil)).status or"offline"end function g.isOnline(i,H)return(H or g.getStatus(i or nil))=="online"end function L.calculateFloating(i,H)if(t(i,H)).flags==0 then return i,H,0,0 end local T=L.getx()for g=-1,1,2 do if i+g==T then return i,H,-g,0 end end for T=-1,1,2 do if i+T>=0 and i+T<=99 then if(t(i+T,H)).flags==0 then if not J(i+T,H)then E(500)else E(150)return i,H,-T,0 end end end end for T=-1,1,1 do for g=-2,2,2 do if(i+T>=0 and i+T<=99)and(H+g>=0 and H+g<=53)then if(t(i+T,H+g)).flags==0 then if not J(i+T,H+g)then E(500)else E(150)return i,H,-T,-g end end end end end return nil end function L.getx()if not C()then return nil end return I(((C()).x or 0)*.03125)end function L.gety()if not C()then return nil end return I(((C()).y or 0)*.03125)end function L.get()if not C()then return nil end return L.getx(),L.gety()end function L.full(i,H)g9("tilehandler:full<x>",i,"number")g9("tilehandler:full<y>",H,"number")local T=A.contains local g=table.insert local L,k,q=0,{},getObjects()for q,A in pairs(q)do if(A.x>=i*32-6 and A.x<=(i+1)*32-6)and(A.y>=H*32-2 and A.y<=(H+1)*32-2)then L=L+A.count if not T(k,A.id)then g(k,A.id)end end end return L>=3800 or#k>=20 end function m.isStuck()if not r then r=g.isOnline end return(r and r()or g.isOnline())and B()==500 end function m.handleStuck()local i=0 local H=1 local T=15 while m.isStuck()do if i%H==0 then P()end i=i+1 local g=0 while g~=T do g=g+1 E(1000)if g~=0 and g%5~=0 then if not m.isStuck()then break end end end end end function H.c(i,k,q,A,x)x=x~=nil and x or false if not i9 or i9 and Z(Y(),i9)>=10 then if not v then v=h.isFailed end if v()then h.handleCaptcha()end i9=Y()if not H9 or H9 and Z(Y(),H9)>=15 then if not c then c=m.isStuck end if c()then m.handleStuck()end H9=i9 end end if not r then r=g.isOnline end if not r()then H.reconnect()if(T.getWorld()):match("_")then l.skipTutorial()end if i then g9("auth:c<world>",i,"string")i=i:upper()if not T.isInside(i)then T.warp(i,k or"")end if q and A then l.sfindPath(q,A)end end end if x and(q and A)then if I((C()).x*.03125)~=q or I((C()).y*.03125)~=A then if not u then u=L.isWhiteDoor end if u()and(i and k)then T.warp(i,k)end J(q,A)end end end function H.reconnect(i,H,T)i=i or 8 H=H or 5 T=T~=nil and T or false local L=0 local k=T and 1 or 6 local q=T and 7 or 5 E(math.random(0,q)*1000)while not g.isOnline()do local T=g.getStatus()if T=="suspended"then return T end if T=="banned"then return T end if T=="maintenance"then return T end if T=="version update"then return T end if T=="temporary ban"then return T end if T=="onsendtoserver"then return T end if T=="aap detected"then return T end if T=="invalid email"then return T end if T=="guest error"then return T end if g.isOnline()then break end if L~=0 and L%(k*i)==0 then local i=0 local T=H*60 while i~=T do i=i+1 E(1000)if g.isOnline()then break end end if g.isOnline()then break end end if L%k==0 then P()end L=L+1 local A=0 while A~=q do A=A+1 E(1000)if g.isOnline()then break end end end return g.getStatus()end function H.login(i,T,g,L)T=T~=nil and T or false g=g or 10000 L=L~=nil and L or false g9("auth:login<credential>",i,"table")g9("auth:login<remove>",T,"boolean")g9("auth:login<delay>",g,"number")g9("auth:login<force>",L,"boolean")local k,q local A=0 local x=2 local K=10 local d=1 if T and C()then k=(C()).name while C(k)do if A>K then break end if A%x==0 then y(k)end A=A+1 E(d*1000)end end A=0 k=i.name q=i.password if k==""and q==""then k=C()and(C()).name end if not C(k)then if q==""then D(f.GUEST_ACCOUNT,true)end if i.proxy then o(k,q,i.proxy)else o(k,q)end D(f.GUEST_ACCOUNT,false)else P()end D(f.AUTO_RECONNECT,false)D(f.AUTO_LEAVE,false)if not L then local i=H.reconnect(8,5,true)E(g)return i end E(g)end function k.format(i)g9("numberutils:format<number>",i,"number")if i>=1000000 then return R("%.2fm",i*1e-006)elseif i>=1000 then return R("%.2fk",i*.001)end return tostring(i)end function k.nformat(i)g9("numberutils:nformat<number>",i,"number")local H,T=R("%0.f",i)while T~=0 do H,T=H:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return H end function q.nowIso()local i=e("!*t",Y())local H=R("%d-%02d-%02dT%02d:%02d:%02dZ",i.year,i.month,i.day,i.hour,i.min,i.sec)return H end function A.contains(i,H)g9("tableutils:contains",i,"table")if type(H)=="string"then H=H:upper()end for T=1,#i,1 do local g=i[T]if type(g)=="string"then g=g:upper()end if g==H then return true end end return false end function K.collect(i,H,T)if Q((C()).x-H)>96 or Q((C()).y-T)>96 then return false end j({type=11;int_data=i;pos_x=H,pos_y=T})return true end function K.tvend(i,H)wrench(0,0)E(200)O(2,F.TAKE_VEND:format(i,H))E(1500)end function K.vend(i,H,T)wrench(0,0)E(200)if(t(H,T)).data==0 then O(2,F.INSERT_VEND:format(H,T,i))else O(2,F.UPDATE_VEND:format(H,T))end E(1500)end function d.drop(i,H)g9("inventoryhandler:drop<item_id>",i,"number")H=H or w(i)if H==0 then return end g9("inventoryhandler:drop<item_count>",H,"number")j({type=0,flags=48;pos_x=(C()).x,pos_y=(C()).y})O(2,F.DROP_DIALOG:format(i))E(250)O(2,F.DROP_OK:format(i,H))E(1250)end function x.random(i,H,T,g,L)i=i or 1 H=H or 1 T=T~=nil and T or false g=g~=nil and g or false L=L~=nil and L or false if not x.charset then local i=table.insert local H={}if T then for T=48,57,1 do i(H,string.char(T))end end for T=65,90,1 do i(H,string.char(T))end for T=97,122,1 do i(H,string.char(T))end x.charset=H end local k=""for i=1,i,1 do math.randomseed(((Y()*H)*i)*(B()or 1))k=k..x.charset[math.random(1,#x.charset)]end if g then return k:upper()end if L then return k:lower()end return k end function x.randomi(i,H)i=i or 1 H=H or 1 if not x.charseti then local i=table.insert local H={}for T=48,57,1 do i(H,string.char(T))end x.charseti=H end local T=""for i=1,i,1 do math.randomseed(((Y()*H)*i)*(B()or 1))T=T..x.charseti[math.random(#x.charseti)]end return T end function l.sfindPath(i,H)g9("botutils:sfindpath<x>",i,"number")g9("botutils:sfindpath<x>",H,"number")local T=0 local g=10 local L=J(i,H)while not L do if T>g then break end L=J(i,H)if L then break end E(100)T=T+1 end return L end function l.getGuest()if not C()then return nil end local i=W()for H=0,#i,1 do local T=i[H]if T.name:match("_")then if(T.name:match("(.+)_%d+")):upper()==(C()).name:upper()then return T.name end end end return nil end function l.skipTutorial()local i=l.getGuest()if not i then i=x.random(13)end if i:match("_")then i=i:gsub("_","")end if not(T.getWorld()):match(".+_1_.+")then return nil end O(2,F.TUTORIAL_POPUP_CLOSE)E(200)while not l.sfindPath(86,30)do E(1000)end G()while not(T.getWorld()):match(".+_2_.+")do E(1000)end while not l.sfindPath(46,23)do E(1000)end while(t(47,23)).fg~=0 do S(1,0)E(200)end while(t(47,23)).fg==0 do V(2,1,0)E(200)end while(t(47,23)).fg~=0 do S(1,0)E(200)end while w(3)==0 do a(3)E(250)end while(t(47,23)).fg~=0 do S(1,0)E(200)end while(t(47,23)).fg==0 do V(3,1,0)E(750)end while w(10672)==0 do E(500)end while w(10672)~=0 do V(10672,1,0)E(750)end while(t(47,23)).fg==3 do S(1,0)E(200)end while w(48)==0 do a(3)E(250)end while not n(48)do s(48)E(1000)end O(3,F.EXIT)while not T.isInside("EXIT")do E(1000)end local H=0 while not T.warp(i)do E(1000)i=i..H end while w(9640)==0 do E(200)end while w(9640)~=0 do V(9640,0,-1)E(200)end for i=0,2,1 do N(x.random(1))E(1500)end end function U.createMessageID(i,H)g9("webhook:fmessage<url>",i,"string")g9("webhook:fmessage<message>",H,"string")local T=i.."?wait=1"local g=R("[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Write-Host (Invoke-RestMethod -Uri %s -ContentType application/json -Method POST -Body (@{\'content\'=\'%s\'} | ConvertTo-Json -Depth 4));",T,H)local L=io.popen("powershell -Command \""..(g.."\""))if not L then return nil end local k=(L:read("*all")):match("@{id=(%d+);")L:close()return k end function U.getDefaultFooter()return{text="Developed by machseeman and made with <3\nLast Updated",icon_url="https://raw.githubusercontent.com/junssekut/saraFarm/main/images/img_logo-machseeman-eye.jpg"}end i.Auth=H i.WorldHandler=T i.StatusHandler=g i.PacketHandler=K i.InventoryHandler=d i.TileHandler=L i.NumberUtils=k i.DateUtils=q i.TableUtils=A i.StringUtils=x i.BotUtils=l i.PingHandler=m i.CaptchaHandler=h i.WebhookHandler=U i.ItemDatabase=b i.Json=X i.Date=z i.ItemSprites={[242]="<:worldlock:1062300767773540392>";[1796]="<:diamondlock:1062300596616577034>";[2978]="<:vendingmachine:1083098588516712508>";[4584]="<:pepper:982947453089247264>";[4585]="<:pepper_tree_seed:1012630107715797073>",[5666]="<:laser_grid:1017034752060030976>";[5667]="<:laser_grid_seed:1017035839223640165>";GLOBE="<:globe:1062300599107993600>",BOARD="<:board1:1061608767130714222>",BOX="<:box:1061608771513761923>"}i.AssertUtils={assertv=T9;tassertv=g9}return i