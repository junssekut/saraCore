local k={_VERSION="0.1.6",_AUTHOR="junssekut#4964",_CONTRIBUTORS={}}local p={}local L={}local P={}local T={}local y={}local o={}local S={}local m={}local n={}local j={}local l={}local d={}local b={}local D={}local g={VALUE_MISMATCH="[%s] got: %s";TYPE_MISMATCH="[%s] got: %s, expected: %s"}local X={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0",DROP_DIALOG="action|drop\n|itemID|%d",DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit";TUTORIAL_POPUP_CLOSE="ftue_start_popup_close",TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1",INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d";UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local Z={SELECT_ALL="Select All",GUEST_ACCOUNT="Guest Account",EXTERNAL="External";AUTO_ACCESS="Auto Access",AUTO_RECONNECT="Auto Reconnect";AUTO_LEAVE="Auto Leave",IGNORE_GEMS="Ignore Gems"}local M=_G.getBot local R=_G.getTile local H=_G.sendPacket local J=_G.sendPacketRaw local U=_G.sleep local t=_G.connect local K=_G.request local a=_G.setBool local c=_G.removeBot local V=_G.addBot local v=_G.findItem local O=_G.getPing local I=_G.findPath local h=_G.getPlayers local F=_G.enter local Y=_G.punch local x=_G.place local w=_G.collect local C=_G.wear local Q=_G.findClothes local W=_G.say local G=string.format local u=math.floor local r=math.abs local s=os.date local e=os.time local A=os.difftime local B=T.isWhiteDoor local q=P.isOnline local E=b.isFailed local z=d.isStuck local f=assert((load(K("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local i=assert((load(K("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local N=assert((load(K("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local kk local pk local function Lk(k,p)if not k then error(p or"Assertion Failed!")end return k end local function Pk(k,p,L)return Lk(type(p)==L,g.TYPE_MISMATCH:format(k,type(p),L))end function L.exit()H(3,X.EXIT)while not L.isInside("exit")do U(1000)end end function b.getCaptcha()if not M()then return"unknown"end return(M()).captcha or"unknown"end function b.isFailed()return not(b.getCaptcha()):match("Solved")end function b.handleCaptcha()local k=e()disconnect()U(250)p.reconnect()return N.diff(k)end function L.warp(k,y,o,S,m)y=y or""o=o or 15 S=S or 6 m=m or 5000 Pk("worldhandler:warp<world>",k,"string")Pk("worldhandler:warp<id>",y,"string")Pk("worldhandler:warp<limit_tries>",o,"number")Pk("worldhandler:warp<after_tries>",S,"number")k=k:upper()local n=0 local j=5 while not L.isInside(k)do if not P.isOnline()then p.reconnect()end if n~=0 and n%(S*o)==0 then return false end if n%S==0 then H(3,X.JOIN_WORLD:format(y==""and k or k..("|"..y)))end n=n+1 local T=0 while T~=j do T=T+1 U(1000)if L.isInside(k)then break end end end if k=="EXIT"or y==""then return L.isInside(k)end n=0 while T.isWhiteDoor()do if not P.isOnline()then p.reconnect()end if n~=0 and n%(S*o)==0 then return false end if n%S==0 then H(3,X.JOIN_WORLD:format(k..("|"..y)))end n=n+1 local L=0 while L~=j do L=L+1 U(1000)if not T.isWhiteDoor()then break end end end U(j)return L.isInside(k)end function L.getWorld()if not M()then return"unknown"end return(M()).world or"unknown"end function L.isInside(k)Lk(type(k)=="string",g.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(k)))return L.getWorld()==k end function T.isWhiteDoor()if not M()then return false end local k=R(u((M()).x*.03125),u((M()).y*.03125))return(k and k.fg or nil)==6 end function T.getWhiteDoor()for k=0,99,1 do if(R(k,23)).fg==6 then return{x=k,y=23}end end return nil end function P.getStatus(k)if not M(k or nil)then return"offline"end return(M(k or nil)).status or"offline"end function P.isOnline(k,p)return(p or P.getStatus(k or nil))=="online"end function T.calculateFloating(k,p)if(R(k,p)).flags==0 then return k,p,0,0 end local L=T.getx()for P=-1,1,2 do if k+P==L then return k,p,-P,0 end end for L=-1,1,2 do if k+L>=0 and k+L<=99 then if(R(k+L,p)).flags==0 then if not I(k+L,p)then U(500)else U(150)return k,p,-L,0 end end end end for L=-1,1,1 do for P=-2,2,2 do if(k+L>=0 and k+L<=99)and(p+P>=0 and p+P<=53)then if(R(k+L,p+P)).flags==0 then if not I(k+L,p+P)then U(500)else U(150)return k,p,-L,-P end end end end end return nil end function T.getx()if not M()then return nil end return u(((M()).x or 0)*.03125)end function T.gety()if not M()then return nil end return u(((M()).y or 0)*.03125)end function T.get()if not M()then return nil end return T.getx(),T.gety()end function T.full(k,p)Pk("tilehandler:full<x>",k,"number")Pk("tilehandler:full<y>",p,"number")local L=S.contains local P=table.insert local T,y,o=0,{},getObjects()for o,S in pairs(o)do if(S.x>=k*32-6 and S.x<=(k+1)*32-6)and(S.y>=p*32-2 and S.y<=(p+1)*32-2)then T=T+S.count if not L(y,S.id)then P(y,S.id)end end end return T>=3800 or#y>=20 end function d.isStuck()if not q then q=P.isOnline end return(q and q()or P.isOnline())and O()==500 end function d.handleStuck()local k=0 local p=1 local L=15 while d.isStuck()do if k%p==0 then t()end k=k+1 local P=0 while P~=L do P=P+1 U(1000)if P~=0 and P%5~=0 then if not d.isStuck()then break end end end end end function p.c(k,y,o,S,m)m=m~=nil and m or false if not kk or kk and A(e(),kk)>=10 then if not E then E=b.isFailed end if E()then b.handleCaptcha()end kk=e()if not pk or pk and A(e(),pk)>=15 then if not z then z=d.isStuck end if z()then d.handleStuck()end pk=kk end end if not q then q=P.isOnline end if not q()then p.reconnect()if(L.getWorld()):match("_")then l.skipTutorial()end if k then Pk("auth:c<world>",k,"string")k=k:upper()if not L.isInside(k)then L.warp(k,y or"")end if o and S then l.sfindPath(o,S)end end end if m and(o and S)then if u((M()).x*.03125)~=o or u((M()).y*.03125)~=S then if not B then B=T.isWhiteDoor end if B()and(k and y)then L.warp(k,y)end I(o,S)end end end function p.reconnect(k,p,L)k=k or 8 p=p or 5 L=L~=nil and L or false local T=0 local y=L and 1 or 6 local o=L and 7 or 5 U(math.random(0,o)*1000)while not P.isOnline()do local L=P.getStatus()if L=="suspended"then return L end if L=="banned"then return L end if L=="maintenance"then return L end if L=="version update"then return L end if L=="temporary ban"then return L end if L=="onsendtoserver"then return L end if L=="aap detected"then return L end if L=="invalid email"then return L end if L=="guest error"then return L end if P.isOnline()then break end if T~=0 and T%(y*k)==0 then local k=0 local L=p*60 while k~=L do k=k+1 U(1000)if P.isOnline()then break end end if P.isOnline()then break end end if T%y==0 then t()end T=T+1 local S=0 while S~=o do S=S+1 U(1000)if P.isOnline()then break end end end return P.getStatus()end function p.login(k,L,P,T)L=L~=nil and L or false P=P or 10000 T=T~=nil and T or false Pk("auth:login<credential>",k,"table")Pk("auth:login<remove>",L,"boolean")Pk("auth:login<delay>",P,"number")Pk("auth:login<force>",T,"boolean")local y,o local S=0 local m=2 local n=10 local j=1 if L and M()then y=(M()).name while M(y)do if S>n then break end if S%m==0 then c(y)end S=S+1 U(j*1000)end end S=0 y=k.name o=k.password if y==""and o==""then y=M()and(M()).name end if not M(y)then if o==""then a(Z.GUEST_ACCOUNT,true)end if k.proxy then V(y,o,k.proxy)else V(y,o)end a(Z.GUEST_ACCOUNT,false)else t()end a(Z.AUTO_RECONNECT,false)a(Z.AUTO_LEAVE,false)if not T then local k=p.reconnect(8,5,true)U(P)return k end U(P)end function y.format(k)Pk("numberutils:format<number>",k,"number")if k>=1000000 then return G("%.2fm",k*1e-006)elseif k>=1000 then return G("%.2fk",k*.001)end return tostring(k)end function y.nformat(k)Pk("numberutils:nformat<number>",k,"number")local p,L=G("%0.f",k)while L~=0 do p,L=p:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return p end function o.nowIso()local k=s("!*t",e())local p=G("%d-%02d-%02dT%02d:%02d:%02dZ",k.year,k.month,k.day,k.hour,k.min,k.sec)return p end function S.contains(k,p)Pk("tableutils:contains",k,"table")if type(p)=="string"then p=p:upper()end for L=1,#k,1 do local P=k[L]if type(P)=="string"then P=P:upper()end if P==p then return true end end return false end function n.collect(k,p,L)if r((M()).x-p)>96 or r((M()).y-L)>96 then return false end J({type=11;int_data=k,pos_x=p,pos_y=L})return true end function n.tvend(k,p)wrench(0,0)U(200)H(2,X.TAKE_VEND:format(k,p))U(1500)end function n.vend(k,p,L)wrench(0,0)U(200)if(R(p,L)).data==0 then H(2,X.INSERT_VEND:format(p,L,k))else H(2,X.UPDATE_VEND:format(p,L))end U(1500)end function j.drop(k,p)Pk("inventoryhandler:drop<item_id>",k,"number")p=p or v(k)if p==0 then return end Pk("inventoryhandler:drop<item_count>",p,"number")J({type=0;flags=48;pos_x=(M()).x;pos_y=(M()).y})H(2,X.DROP_DIALOG:format(k))U(250)H(2,X.DROP_OK:format(k,p))U(1250)end function m.random(k,p,L,P,T)k=k or 1 p=p or 1 L=L~=nil and L or false P=P~=nil and P or false T=T~=nil and T or false if not m.charset then local k=table.insert local p={}if L then for L=48,57,1 do k(p,string.char(L))end end for L=65,90,1 do k(p,string.char(L))end for L=97,122,1 do k(p,string.char(L))end m.charset=p end local y=""for k=1,k,1 do math.randomseed(((e()*p)*k)*(O()or 1))y=y..m.charset[math.random(1,#m.charset)]end if P then return y:upper()end if T then return y:lower()end return y end function m.randomi(k,p)k=k or 1 p=p or 1 if not m.charseti then local k=table.insert local p={}for L=48,57,1 do k(p,string.char(L))end m.charseti=p end local L=""for k=1,k,1 do math.randomseed(((e()*p)*k)*(O()or 1))L=L..m.charseti[math.random(#m.charseti)]end return L end function l.sfindPath(k,p)Pk("botutils:sfindpath<x>",k,"number")Pk("botutils:sfindpath<x>",p,"number")local L=0 local P=10 local T=I(k,p)while not T do if L>P then break end T=I(k,p)if T then break end U(100)L=L+1 end return T end function l.getGuest()if not M()then return nil end local k=h()for p=0,#k,1 do local L=k[p]if L.name:match("_")then if(L.name:match("(.+)_%d+")):upper()==(M()).name:upper()then return L.name end end end return nil end function l.skipTutorial()local k=l.getGuest()if not k then k=m.random(13)end if k:match("_")then k=k:gsub("_","")end if not(L.getWorld()):match(".+_1_.+")then return nil end H(2,X.TUTORIAL_POPUP_CLOSE)U(200)while not l.sfindPath(86,30)do U(1000)end F()while not(L.getWorld()):match(".+_2_.+")do U(1000)end while not l.sfindPath(46,23)do U(1000)end while(R(47,23)).fg~=0 do Y(1,0)U(200)end while(R(47,23)).fg==0 do x(2,1,0)U(200)end while(R(47,23)).fg~=0 do Y(1,0)U(200)end while v(3)==0 do w(3)U(250)end while(R(47,23)).fg~=0 do Y(1,0)U(200)end while(R(47,23)).fg==0 do x(3,1,0)U(750)end while v(10672)==0 do U(500)end while v(10672)~=0 do x(10672,1,0)U(750)end while(R(47,23)).fg==3 do Y(1,0)U(200)end while v(48)==0 do w(3)U(250)end while not Q(48)do C(48)U(1000)end H(3,X.EXIT)while not L.isInside("EXIT")do U(1000)end local p=0 while not L.warp(k)do U(1000)k=k..p end while v(9640)==0 do U(200)end while v(9640)~=0 do x(9640,0,-1)U(200)end for k=0,2,1 do W(m.random(1))U(1500)end end function D.createMessageID(k,p)Pk("webhook:fmessage<url>",k,"string")Pk("webhook:fmessage<message>",p,"string")local L=k.."?wait=1"local P=G("[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Write-Host (Invoke-RestMethod -Uri %s -ContentType application/json -Method POST -Body (@{\'content\'=\'%s\'} | ConvertTo-Json -Depth 4));",L,p)local T=io.popen("powershell -Command \""..(P.."\""))if not T then return nil end local y=(T:read("*all")):match("@{id=(%d+);")T:close()return y end function D.getDefaultFooter()return{text="Developed by machseeman and made with <3\nLast Updated";icon_url="https://raw.githubusercontent.com/junssekut/saraFarm/main/images/img_logo-machseeman-eye.jpg"}end k.Auth=p k.WorldHandler=L k.StatusHandler=P k.PacketHandler=n k.InventoryHandler=j k.TileHandler=T k.NumberUtils=y k.DateUtils=o k.TableUtils=S k.StringUtils=m k.BotUtils=l k.PingHandler=d k.CaptchaHandler=b k.WebhookHandler=D k.ItemDatabase=f k.Json=i k.Date=N k.ItemSprites={[242]="<:worldlock:1062300767773540392>";[1796]="<:diamondlock:1062300596616577034>";[2978]="<:vendingmachine:1083098588516712508>",[4584]="<:pepper:982947453089247264>";[4585]="<:pepper_tree_seed:1012630107715797073>";[5666]="<:laser_grid:1017034752060030976>";[5667]="<:laser_grid_seed:1017035839223640165>",GLOBE="<:globe:1062300599107993600>",BOARD="<:board1:1061608767130714222>",BOX="<:box:1061608771513761923>";GROWTOPIA_NO="<:no:1079010327640948736>",GROWTOPIA_YES="<:ceklis:1083906883888353350>",NO="<:offline:998723190773788742>";YES="<:online:998723195194585129>";NOR="<:nor:998723131919306803>";FIRE_WAND="<:FireWands:976056227199086612>",NUKED="<:Nuke:974310582343831572>"}k.AssertUtils={assertv=Lk,tassertv=Pk}return k