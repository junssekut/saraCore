local F={_VERSION="0.1.6",_AUTHOR="junssekut#4964";_CONTRIBUTORS={}}local K={}local I={}local f={}local V={}local y={}local R={}local z={}local E={}local H={}local h={}local L={}local U={}local i={}local S={}local N={VALUE_MISMATCH="[%s] got: %s";TYPE_MISMATCH="[%s] got: %s, expected: %s"}local v={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0",DROP_DIALOG="action|drop\n|itemID|%d",DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit",TUTORIAL_POPUP_CLOSE="ftue_start_popup_close",TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1",INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d";UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local u={SELECT_ALL="Select All",GUEST_ACCOUNT="Guest Account";EXTERNAL="External";AUTO_ACCESS="Auto Access";AUTO_RECONNECT="Auto Reconnect";AUTO_LEAVE="Auto Leave",IGNORE_GEMS="Ignore Gems"}local m=_G.getBot local k=_G.getTile local M=_G.sendPacket local o=_G.sendPacketRaw local J=_G.sleep local c=_G.connect local Y=_G.request local D=_G.setBool local a=_G.removeBot local P=_G.addBot local s=_G.findItem local e=_G.getPing local r=_G.findPath local X=_G.getPlayers local O=_G.enter local A=_G.punch local p=_G.place local x=_G.collect local Q=_G.wear local C=_G.findClothes local t=_G.say local W=string.format local G=math.floor local T=math.abs local Z=os.date local q=os.time local n=os.difftime local l=V.isWhiteDoor local B=f.isOnline local b=i.isFailed local j=U.isStuck local d=assert((load(Y("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local w=assert((load(Y("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local g=assert((load(Y("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local FN local KN local function IN(F,K)if not F then error(K or"Assertion Failed!")end return F end local function fN(F,K,I)return IN(type(K)==I,N.TYPE_MISMATCH:format(F,type(K),I))end function I.exit()M(3,v.EXIT)while not I.isInside("exit")do J(1000)end end function i.getCaptcha()if not m()then return"unknown"end return(m()).captcha or"unknown"end function i.isFailed()return not(i.getCaptcha()):match("Solved")end function i.handleCaptcha()local F=q()disconnect()J(250)K.reconnect()return g.diff(F)end function I.warp(F,y,R,z,E)y=y or""R=R or 15 z=z or 6 E=E or 5000 fN("worldhandler:warp<world>",F,"string")fN("worldhandler:warp<id>",y,"string")fN("worldhandler:warp<limit_tries>",R,"number")fN("worldhandler:warp<after_tries>",z,"number")F=F:upper()local H=0 local h=5 while not I.isInside(F)do if not f.isOnline()then K.reconnect()end if H~=0 and H%(z*R)==0 then return false end if H%z==0 then M(3,v.JOIN_WORLD:format(y==""and F or F..("|"..y)))end H=H+1 local V=0 while V~=h do V=V+1 J(1000)if I.isInside(F)then break end end end if F=="EXIT"or y==""then return I.isInside(F)end H=0 while V.isWhiteDoor()do if not f.isOnline()then K.reconnect()end if H~=0 and H%(z*R)==0 then return false end if H%z==0 then M(3,v.JOIN_WORLD:format(F..("|"..y)))end H=H+1 local I=0 while I~=h do I=I+1 J(1000)if not V.isWhiteDoor()then break end end end J(h)return I.isInside(F)end function I.getWorld()if not m()then return"unknown"end return(m()).world or"unknown"end function I.isInside(F)IN(type(F)=="string",N.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(F)))return I.getWorld()==F end function V.isWhiteDoor()if not m()then return false end local F=k(G((m()).x*.03125),G((m()).y*.03125))return(F and F.fg or nil)==6 end function f.getStatus(F)if not m(F or nil)then return"offline"end return(m(F or nil)).status or"offline"end function f.isOnline(F,K)return(K or f.getStatus(F or nil))=="online"end function V.calculateFloating(F,K)if(k(F,K)).flags==0 then return F,K,0,0 end local I=V.getx()for f=-1,1,2 do if F+f==I then return F,K,-f,0 end end for I=-1,1,2 do if F+I>=0 and F+I<=99 then if(k(F+I,K)).flags==0 then if not r(F+I,K)then J(500)else J(150)return F,K,-I,0 end end end end for I=-1,1,1 do for f=-2,2,2 do if(F+I>=0 and F+I<=99)and(K+f>=0 and K+f<=53)then if(k(F+I,K+f)).flags==0 then if not r(F+I,K+f)then J(500)else J(150)return F,K,-I,-f end end end end end return nil end function V.getx()if not m()then return nil end return G(((m()).x or 0)*.03125)end function V.gety()if not m()then return nil end return G(((m()).y or 0)*.03125)end function V.get()if not m()then return nil end return V.getx(),V.gety()end function V.full(F,K)fN("tilehandler:full<x>",F,"number")fN("tilehandler:full<y>",K,"number")local I=z.contains local f=table.insert local V,y,R=0,{},getObjects()for R,z in pairs(R)do if(z.x>=F*32-6 and z.x<=(F+1)*32-6)and(z.y>=K*32-2 and z.y<=(K+1)*32-2)then V=V+z.count if not I(y,z.id)then f(y,z.id)end end end return V>=3800 or#y>=20 end function U.isStuck()if not B then B=f.isOnline end return(B and B()or f.isOnline())and e()==500 end function U.handleStuck()local F=0 local K=1 local I=15 while U.isStuck()do if F%K==0 then c()end F=F+1 local f=0 while f~=I do f=f+1 J(1000)if f~=0 and f%5~=0 then if not U.isStuck()then break end end end end end function K.c(F,y,R,z,E)E=E~=nil and E or false if not FN or FN and n(q(),FN)>=10 then if not b then b=i.isFailed end if b()then i.handleCaptcha()end FN=q()if not KN or KN and n(q(),KN)>=15 then if not j then j=U.isStuck end if j()then U.handleStuck()end KN=FN end end if not B then B=f.isOnline end if not B()then K.reconnect()if(I.getWorld()):match("_")then L.skipTutorial()end if F then fN("auth:c<world>",F,"string")F=F:upper()if not I.isInside(F)then I.warp(F,y or"")end if R and z then L.sfindPath(R,z)end end end if E and(R and z)then if G((m()).x*.03125)~=R or G((m()).y*.03125)~=z then if not l then l=V.isWhiteDoor end if l()and(F and y)then I.warp(F,y)end r(R,z)end end end function K.reconnect(F,K,I)F=F or 8 K=K or 5 I=I~=nil and I or false local V=0 local y=I and 1 or 6 local R=I and 7 or 5 J(math.random(0,R)*1000)while not f.isOnline()do local I=f.getStatus()if I=="suspended"then return I end if I=="banned"then return I end if I=="maintenance"then return I end if I=="version update"then return I end if I=="temporary ban"then return I end if I=="onsendtoserver"then return I end if I=="aap detected"then return I end if I=="invalid email"then return I end if I=="guest error"then return I end if f.isOnline()then break end if V~=0 and V%(y*F)==0 then local F=0 local I=K*60 while F~=I do F=F+1 J(1000)if f.isOnline()then break end end if f.isOnline()then break end end if V%y==0 then c()end V=V+1 local z=0 while z~=R do z=z+1 J(1000)if f.isOnline()then break end end end return f.getStatus()end function K.login(F,I,f,V)I=I~=nil and I or false f=f or 10000 V=V~=nil and V or false fN("auth:login<credential>",F,"table")fN("auth:login<remove>",I,"boolean")fN("auth:login<delay>",f,"number")fN("auth:login<force>",V,"boolean")local y,R local z=0 local E=2 local H=10 local h=1 if I and m()then y=(m()).name while m(y)do if z>H then break end if z%E==0 then a(y)end z=z+1 J(h*1000)end end z=0 y=F.name R=F.password if y==""and R==""then y=m()and(m()).name end if not m(y)then if R==""then D(u.GUEST_ACCOUNT,true)end if F.proxy then P(y,R,F.proxy)else P(y,R)end D(u.GUEST_ACCOUNT,false)else c()end D(u.AUTO_RECONNECT,false)D(u.AUTO_LEAVE,false)if not V then local F=K.reconnect(8,5,true)J(f)return F end J(f)end function y.format(F)fN("numberutils:format<number>",F,"number")if F>=1000000 then return W("%.2fm",F*1e-006)elseif F>=1000 then return W("%.2fk",F*.001)end return tostring(F)end function y.nformat(F)fN("numberutils:nformat<number>",F,"number")local K,I=W("%0.f",F)while I~=0 do K,I=K:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return K end function R.nowIso()local F=Z("!*t",q())local K=W("%d-%02d-%02dT%02d:%02d:%02dZ",F.year,F.month,F.day,F.hour,F.min,F.sec)return K end function z.contains(F,K)fN("tableutils:contains",F,"table")if type(K)=="string"then K=K:upper()end for I=1,#F,1 do local f=F[I]if type(f)=="string"then f=f:upper()end if f==K then return true end end return false end function H.collect(F,K,I)if T((m()).x-K)>96 or T((m()).y-I)>96 then return false end o({type=11,int_data=F;pos_x=K,pos_y=I})return true end function H.tvend(F,K)wrench(0,0)J(200)M(2,v.TAKE_VEND:format(F,K))J(1500)end function H.vend(F,K,I)wrench(0,0)J(200)if(k(K,I)).data==0 then M(2,v.INSERT_VEND:format(K,I,F))else M(2,v.UPDATE_VEND:format(K,I))end J(1500)end function h.drop(F,K)fN("inventoryhandler:drop<item_id>",F,"number")K=K or s(F)if K==0 then return end fN("inventoryhandler:drop<item_count>",K,"number")o({type=0;flags=48,pos_x=(m()).x;pos_y=(m()).y})M(2,v.DROP_DIALOG:format(F))J(250)M(2,v.DROP_OK:format(F,K))J(1250)end function E.random(F,K,I,f,V)F=F or 1 K=K or 1 I=I~=nil and I or false f=f~=nil and f or false V=V~=nil and V or false if not E.charset then local F=table.insert local K={}if I then for I=48,57,1 do F(K,string.char(I))end end for I=65,90,1 do F(K,string.char(I))end for I=97,122,1 do F(K,string.char(I))end E.charset=K end local y=""for F=1,F,1 do math.randomseed(((q()*K)*F)*(e()or 1))y=y..E.charset[math.random(1,#E.charset)]end if f then return y:upper()end if V then return y:lower()end return y end function E.randomi(F,K)F=F or 1 K=K or 1 if not E.charseti then local F=table.insert local K={}for I=48,57,1 do F(K,string.char(I))end E.charseti=K end local I=""for F=1,F,1 do math.randomseed(((q()*K)*F)*(e()or 1))I=I..E.charseti[math.random(#E.charseti)]end return I end function L.sfindPath(F,K)fN("botutils:sfindpath<x>",F,"number")fN("botutils:sfindpath<x>",K,"number")local I=0 local f=10 local V=r(F,K)while not V do if I>f then break end V=r(F,K)if V then break end J(100)I=I+1 end return V end function L.getGuest()if not m()then return nil end local F=X()for K=0,#F,1 do local I=F[K]if I.name:match("_")then if(I.name:match("(.+)_%d+")):upper()==(m()).name:upper()then return I.name end end end return nil end function L.skipTutorial()local F=L.getGuest()if not F then F=E.random(13)end if F:match("_")then F=F:gsub("_","")end if not(I.getWorld()):match(".+_1_.+")then return nil end M(2,v.TUTORIAL_POPUP_CLOSE)J(200)while not L.sfindPath(86,30)do J(1000)end O()while not(I.getWorld()):match(".+_2_.+")do J(1000)end while not L.sfindPath(46,23)do J(1000)end while(k(47,23)).fg~=0 do A(1,0)J(200)end while(k(47,23)).fg==0 do p(2,1,0)J(200)end while(k(47,23)).fg~=0 do A(1,0)J(200)end while s(3)==0 do x(3)J(250)end while(k(47,23)).fg~=0 do A(1,0)J(200)end while(k(47,23)).fg==0 do p(3,1,0)J(750)end while s(10672)==0 do J(500)end while s(10672)~=0 do p(10672,1,0)J(750)end while(k(47,23)).fg==3 do A(1,0)J(200)end while s(48)==0 do x(3)J(250)end while not C(48)do Q(48)J(1000)end M(3,v.EXIT)while not I.isInside("EXIT")do J(1000)end local K=0 while not I.warp(F)do J(1000)F=F..K end while s(9640)==0 do J(200)end while s(9640)~=0 do p(9640,0,-1)J(200)end for F=0,2,1 do t(E.random(1))J(1500)end end function S.createMessageID(F,K)fN("webhook:fmessage<url>",F,"string")fN("webhook:fmessage<message>",K,"string")local I=F.."?wait=1"local f=W("[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Write-Host (Invoke-RestMethod -Uri %s -ContentType application/json -Method POST -Body (@{\'content\'=\'%s\'} | ConvertTo-Json -Depth 4));",I,K)local V=io.popen("powershell -Command \""..(f.."\""))if not V then return nil end local y=(V:read("*all")):match("@{id=(%d+);")V:close()return y end function S.getDefaultFooter()return{text="Developed by machseeman and made with <3\nLast Updated",icon_url="https://raw.githubusercontent.com/junssekut/saraFarm/main/images/img_logo-machseeman-eye.jpg"}end F.Auth=K F.WorldHandler=I F.StatusHandler=f F.PacketHandler=H F.InventoryHandler=h F.TileHandler=V F.NumberUtils=y F.DateUtils=R F.TableUtils=z F.StringUtils=E F.BotUtils=L F.PingHandler=U F.CaptchaHandler=i F.WebhookHandler=S F.ItemDatabase=d F.Json=w F.Date=g F.ItemSprites={[242]="<:worldlock:1062300767773540392>",[1796]="<:diamondlock:1062300596616577034>";[4584]="<:pepper:982947453089247264>",[4585]="<:pepper_tree_seed:1012630107715797073>";[5666]="<:laser_grid:1017034752060030976>",[5667]="<:laser_grid_seed:1017035839223640165>"}F.AssertUtils={assertv=IN;tassertv=fN}return F