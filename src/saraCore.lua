local E={_VERSION="0.1.6",_AUTHOR="junssekut#4964",_CONTRIBUTORS={}}local K={}local A={}local o={}local G={}local W={}local k={}local S={}local d={}local N={}local H={}local J={}local U={}local p={}local n={VALUE_MISMATCH="[%s] got: %s",TYPE_MISMATCH="[%s] got: %s, expected: %s"}local X={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0",DROP_DIALOG="action|drop\n|itemID|%d";DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d",EXIT="action|quit_to_exit";TUTORIAL_POPUP_CLOSE="ftue_start_popup_close";TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1";INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d";UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local j={SELECT_ALL="Select All",GUEST_ACCOUNT="Guest Account",EXTERNAL="External",AUTO_ACCESS="Auto Access";AUTO_RECONNECT="Auto Reconnect";AUTO_LEAVE="Auto Leave";IGNORE_GEMS="Ignore Gems"}local L=_G.getBot local Q=_G.getTile local m=_G.sendPacket local T=_G.sendPacketRaw local y=_G.sleep local h=_G.connect local w=_G.request local z=_G.setBool local x=_G.removeBot local P=_G.addBot local f=_G.findItem local F=_G.getPing local B=_G.findPath local V=_G.getPlayers local g=_G.enter local i=_G.punch local I=_G.place local s=_G.collect local l=_G.wear local r=_G.findClothes local C=_G.say local M=string.format local Z=math.floor local b=math.abs local D=os.date local t=os.time local c=os.difftime local Y=G.isWhiteDoor local R=o.isOnline local e=p.isFailed local a=U.isStuck local q=assert((load(w("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local v=assert((load(w("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local u=assert((load(w("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local O local Eu local function Ku(E,K)if not E then error(K or"Assertion Failed!")end return E end local function Au(E,K,A)return Ku(type(K)==A,n.TYPE_MISMATCH:format(E,type(K),A))end function A.exit()m(3,X.EXIT)while not A.isInside("exit")do y(1000)end end function p.getCaptcha()if not L()then return"unknown"end return(L()).captcha or"unknown"end function p.isFailed()return not(p.getCaptcha()):match("Solved")end function p.handleCaptcha()local E=t()disconnect()y(250)K.reconnect()return u.diff(E)end function A.warp(E,W,k,S,d)W=W or""k=k or 15 S=S or 6 d=d or 5000 Au("worldhandler:warp<world>",E,"string")Au("worldhandler:warp<id>",W,"string")Au("worldhandler:warp<limit_tries>",k,"number")Au("worldhandler:warp<after_tries>",S,"number")E=E:upper()local N=0 local H=5 while not A.isInside(E)do if not o.isOnline()then K.reconnect()end if N~=0 and N%(S*k)==0 then return false end if N%S==0 then m(3,X.JOIN_WORLD:format(W==""and E or E..("|"..W)))end N=N+1 local G=0 while G~=H do G=G+1 y(1000)if A.isInside(E)then break end end end if E=="EXIT"or W==""then return A.isInside(E)end N=0 while G.isWhiteDoor()do if not o.isOnline()then K.reconnect()end if N~=0 and N%(S*k)==0 then return false end if N%S==0 then m(3,X.JOIN_WORLD:format(E..("|"..W)))end N=N+1 local A=0 while A~=H do A=A+1 y(1000)if not G.isWhiteDoor()then break end end end y(H)return A.isInside(E)end function A.getWorld()if not L()then return"unknown"end return(L()).world or"unknown"end function A.isInside(E)Ku(type(E)=="string",n.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(E)))return A.getWorld()==E end function G.isWhiteDoor()if not L()then return false end local E=Q(Z((L()).x*.03125),Z((L()).y*.03125))return(E and E.fg or nil)==6 end function o.getStatus(E)if not L(E or nil)then return"offline"end return(L(E or nil)).status or"offline"end function o.isOnline(E,K)return(K or o.getStatus(E or nil))=="online"end function G.calculateFloating(E,K)if(Q(E,K)).flags==0 then return E,K,0,0 end local A=G.getx()for o=-1,1,2 do if E+o==A then return E,K,-o,0 end end for A=-1,1,2 do if E+A>=0 and E+A<=99 then if(Q(E+A,K)).flags==0 then if not B(E+A,K)then y(500)else y(150)return E,K,-A,0 end end end end for A=-1,1,1 do for o=-2,2,2 do if(E+A>=0 and E+A<=99)and(K+o>=0 and K+o<=53)then if(Q(E+A,K+o)).flags==0 then if not B(E+A,K+o)then y(500)else y(150)return E,K,-A,-o end end end end end return nil end function G.getx()if not L()then return nil end return Z(((L()).x or 0)*.03125)end function G.gety()if not L()then return nil end return Z(((L()).y or 0)*.03125)end function G.get()if not L()then return nil end return G.getx(),G.gety()end function G.full(E,K)Au("tilehandler:full<x>",E,"number")Au("tilehandler:full<y>",K,"number")local A=S.contains local o=table.insert local G,W,k=0,{},getObjects()for k,S in pairs(k)do if(S.x>=E*32-6 and S.x<=(E+1)*32-6)and(S.y>=K*32-2 and S.y<=(K+1)*32-2)then G=G+S.count if not A(W,S.id)then o(W,S.id)end end end return G>=3800 or#W>=20 end function U.isStuck()if not R then R=o.isOnline end return(R and R()or o.isOnline())and F()==500 end function U.handleStuck()local E=0 local K=1 local A=15 while U.isStuck()do if E%K==0 then h()end E=E+1 local o=0 while o~=A do o=o+1 y(1000)if o~=0 and o%5~=0 then if not U.isStuck()then break end end end end end function K.c(E,W,k,S,d)d=d~=nil and d or false if not O or O and c(t(),O)>=10 then if not e then e=p.isFailed end if e()then p.handleCaptcha()end O=t()if not Eu or Eu and c(t(),Eu)>=15 then if not a then a=U.isStuck end if a()then U.handleStuck()end Eu=O end end if not R then R=o.isOnline end if not R()then K.reconnect()if(A.getWorld()):match("_")then J.skipTutorial()end if E then Au("auth:c<world>",E,"string")E=E:upper()if not A.isInside(E)then A.warp(E,W or"")end if k and S then J.sfindPath(k,S)end end end if d and(k and S)then if Z((L()).x*.03125)~=k or Z((L()).y*.03125)~=S then if not Y then Y=G.isWhiteDoor end if Y()and(E and W)then A.warp(E,W)end B(k,S)end end end function K.reconnect(E,K,A)E=E or 8 K=K or 5 A=A~=nil and A or false local G=0 local W=A and 1 or 6 local k=A and 7 or 5 y(math.random(0,k)*1000)while not o.isOnline()do local A=o.getStatus()if A=="suspended"then return A end if A=="banned"then return A end if A=="maintenance"then return A end if A=="version update"then return A end if A=="temporary ban"then return A end if A=="onsendtoserver"then return A end if A=="aap detected"then return A end if A=="invalid email"then return A end if A=="guest error"then return A end if o.isOnline()then break end if G~=0 and G%(W*E)==0 then local E=0 local A=K*60 while E~=A do E=E+1 y(1000)if o.isOnline()then break end end if o.isOnline()then break end end if G%W==0 then h()end G=G+1 local S=0 while S~=k do S=S+1 y(1000)if o.isOnline()then break end end end return o.getStatus()end function K.login(E,A,o,G)A=A~=nil and A or false o=o or 10000 G=G~=nil and G or false Au("auth:login<credential>",E,"table")Au("auth:login<remove>",A,"boolean")Au("auth:login<delay>",o,"number")Au("auth:login<force>",G,"boolean")local W,k local S=0 local d=2 local N=10 local H=1 if A and L()then W=(L()).name while L(W)do if S>N then break end if S%d==0 then x(W)end S=S+1 y(H*1000)end end S=0 W=E.name k=E.password if W==""and k==""then W=L()and(L()).name end if not L(W)then if k==""then z(j.GUEST_ACCOUNT,true)end if E.proxy then P(W,k,E.proxy)else P(W,k)end z(j.GUEST_ACCOUNT,false)else h()end z(j.AUTO_RECONNECT,false)z(j.AUTO_LEAVE,false)if not G then local E=K.reconnect(8,5,true)y(o)return E end y(o)end function W.format(E)Au("numberutils:format<number>",E,"number")if E>=1000000 then return M("%.2fm",E*1e-006)elseif E>=1000 then return M("%.2fk",E*.001)end return tostring(E)end function W.nformat(E)Au("numberutils:nformat<number>",E,"number")local K,A=M("%0.f",E)while A~=0 do K,A=K:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return K end function k.nowIso()local E=D("!*t",t())local K=M("%d-%02d-%02dT%02d:%02d:%02dZ",E.year,E.month,E.day,E.hour,E.min,E.sec)return K end function S.contains(E,K)Au("tableutils:contains",E,"table")if type(K)=="string"then K=K:upper()end for A=1,#E,1 do local o=E[A]if type(o)=="string"then o=o:upper()end if o==K then return true end end return false end function N.collect(E,K,A)if b((L()).x-K)>96 or b((L()).y-A)>96 then return false end T({type=11;int_data=E,pos_x=K,pos_y=A})return true end function N.tvend(E,K)wrench(0,0)y(200)m(2,X.TAKE_VEND:format(E,K))y(1500)end function N.vend(E,K,A)wrench(0,0)y(200)if(Q(K,A)).data==0 then m(2,X.INSERT_VEND:format(K,A,E))else m(2,X.UPDATE_VEND:format(K,A))end y(1500)end function H.drop(E,K)Au("inventoryhandler:drop<item_id>",E,"number")K=K or f(E)if K==0 then return end Au("inventoryhandler:drop<item_count>",K,"number")T({type=0,flags=48,pos_x=(L()).x,pos_y=(L()).y})m(2,X.DROP_DIALOG:format(E))y(250)m(2,X.DROP_OK:format(E,K))y(1250)end function d.random(E,K,A,o,G)E=E or 1 K=K or 1 A=A~=nil and A or false o=o~=nil and o or false G=G~=nil and G or false if not d.charset then local E=table.insert local K={}if A then for A=48,57,1 do E(K,string.char(A))end end for A=65,90,1 do E(K,string.char(A))end for A=97,122,1 do E(K,string.char(A))end d.charset=K end local W=""for E=1,E,1 do math.randomseed(((t()*K)*E)*(F()or 1))W=W..d.charset[math.random(1,#d.charset)]end if o then return W:upper()end if G then return W:lower()end return W end function d.randomi(E,K)E=E or 1 K=K or 1 if not d.charseti then local E=table.insert local K={}for A=48,57,1 do E(K,string.char(A))end d.charseti=K end local A=""for E=1,E,1 do math.randomseed(((t()*K)*E)*(F()or 1))A=A..d.charseti[math.random(#d.charseti)]end return A end function J.sfindPath(E,K)Au("botutils:sfindpath<x>",E,"number")Au("botutils:sfindpath<x>",K,"number")local A=0 local o=10 local G=B(E,K)while not G do if A>o then break end G=B(E,K)if G then break end y(100)A=A+1 end return G end function J.getGuest()if not L()then return nil end local E=V()for K=0,#E,1 do local A=E[K]if A.name:match("_")then if(A.name:match("(.+)_%d+")):upper()==(L()).name:upper()then return A.name end end end return nil end function J.skipTutorial()local E=J.getGuest()if not E then E=d.random(13)end if E:match("_")then E=E:gsub("_","")end if not(A.getWorld()):match(".+_1_.+")then return nil end m(2,X.TUTORIAL_POPUP_CLOSE)y(200)while not J.sfindPath(86,30)do y(1000)end g()while not(A.getWorld()):match(".+_2_.+")do y(1000)end while not J.sfindPath(46,23)do y(1000)end while(Q(47,23)).fg~=0 do i(1,0)y(200)end while(Q(47,23)).fg==0 do I(2,1,0)y(200)end while(Q(47,23)).fg~=0 do i(1,0)y(200)end while f(3)==0 do s(3)y(250)end while(Q(47,23)).fg~=0 do i(1,0)y(200)end while(Q(47,23)).fg==0 do I(3,1,0)y(750)end while f(10672)==0 do y(500)end while f(10672)~=0 do I(10672,1,0)y(750)end while(Q(47,23)).fg==3 do i(1,0)y(200)end while f(48)==0 do s(3)y(250)end while not r(48)do l(48)y(1000)end m(3,X.EXIT)while not A.isInside("EXIT")do y(1000)end local K=0 while not A.warp(E)do y(1000)E=E..K end while f(9640)==0 do y(200)end while f(9640)~=0 do I(9640,0,-1)y(200)end for E=0,2,1 do C(d.random(1))y(1500)end end E.Auth=K E.WorldHandler=A E.StatusHandler=o E.PacketHandler=N E.InventoryHandler=H E.TileHandler=G E.NumberUtils=W E.DateUtils=k E.TableUtils=S E.StringUtils=d E.BotUtils=J E.PingHandler=U E.CaptchaHandler=p E.ItemDatabase=q E.Json=v E.Date=u E.AssertUtils={assertv=Ku,tassertv=Au}return E