local N={_VERSION="0.1.4";_AUTHOR="junssekut#4964";_CONTRIBUTORS={}}local Q={}local r={}local c={}local G={}local l={}local H={}local V={}local J={}local E={}local b={}local h={}local I={VALUE_MISMATCH="[%s] got: %s";TYPE_MISMATCH="[%s] got: %s, expected: %s"}local x={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0";DROP_DIALOG="action|drop\n|itemID|%d",DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit";TUTORIAL_POPUP_CLOSE="ftue_start_popup_close"}local f={SELECT_ALL="Select All";GUEST_ACCOUNT="Guest Account",EXTERNAL="External",AUTO_ACCESS="Auto Access",AUTO_RECONNECT="Auto Reconnect",AUTO_LEAVE="Auto Leave";IGNORE_GEMS="Ignore Gems"}local T=_G.getBot local K=_G.getTile local Z=_G.sendPacket local a=_G.sendPacketRaw local n=_G.sleep local D=_G.connect local Y=_G.request local s=_G.setBool local j=_G.removeBot local o=_G.addBot local P=_G.findItem local y=_G.getPing local S=_G.findPath local w=_G.getPlayers local O=_G.enter local W=_G.punch local u=_G.place local v=_G.collect local R=_G.wear local C=_G.findClothes local A=_G.say local t=string.format local M=math.floor local p=math.abs local e=os.date local i=os.time local m=assert((load(Y("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local d=assert((load(Y("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local z=assert((load(Y("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local function F(N,Q)if not N then error(Q or"Assertion Failed!")end return N end local function L(N,Q,r)return F(type(Q)==r,I.TYPE_MISMATCH:format(N,type(Q),r))end function r.exit()Z(3,x.EXIT)while not r.isInside("exit")do n(1000)end end function r.warp(N,l,H,V,J)l=l or""H=H or 10 V=V or 6 J=J or 2500 L("worldhandler:warp<world>",N,"string")L("worldhandler:warp<id>",l,"string")L("worldhandler:warp<limit_tries>",H,"number")L("worldhandler:warp<after_tries>",V,"number")N=N:upper()local E=0 local b=5 while not r.isInside(N)do if not c.isOnline()then Q.reconnect()end if E~=0 and E%(V*H)==0 then return false end if E%V==0 then Z(3,x.JOIN_WORLD:format(l==""and N or N..("|"..l)))end E=E+1 local G=0 while G~=b do G=G+1 n(1000)if r.isInside(N)then break end end end if N=="EXIT"or l==""then return r.isInside(N)end E=0 while G.isWhiteDoor()do if not c.isOnline()then Q.reconnect()end if E~=0 and E%(V*H)==0 then return false end if E%V==0 then Z(3,x.JOIN_WORLD:format(N..("|"..l)))end E=E+1 local r=0 while r~=b do r=r+1 n(1000)if not G.isWhiteDoor()then break end end end n((b*.5)*1000)return r.isInside(N)end function r.getWorld()if not T()then return"unknown"end return(T()).world or"unknown"end function r.isInside(N)F(type(N)=="string",I.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(N)))return r.getWorld()==N end function G.isWhiteDoor()if not T()then return false end local N=K(M((T()).x*.03125),M((T()).y*.03125))return(N and N.fg or nil)==6 end function c.getStatus(N)if not T(N or nil)then return"offline"end return(T(N or nil)).status or"offline"end function c.isOnline(N,Q)return(Q or c.getStatus(N or nil))=="online"end function G.getx()if not T()then return nil end return M(((T()).x or 0)*.03125)end function G.gety()if not T()then return nil end return M(((T()).y or 0)*.03125)end function G.get()if not T()then return nil end return G.getx(),G.gety()end function Q.reconnect(N,Q,r)N=N or 8 Q=Q or 5 r=r~=nil and r or false local G=0 local l=r and 1 or 6 local H=r and 7 or 5 n(math.random(0,H)*1000)while not c.isOnline()do local r=c.getStatus()if r=="suspended"then return r end if r=="maintenance"then return r end if r=="version update"then return r end if r=="temporary ban"then return r end if r=="onsendtoserver"then return r end if r=="aap detected"then return r end if r=="invalid email"then return r end if r=="guest error"then return r end if c.isOnline()then break end if G~=0 and G%(l*N)==0 then local N=0 local r=Q*60 while N~=r do N=N+1 n(1000)if c.isOnline()then break end end if c.isOnline()then break end end if G%l==0 then D()end G=G+1 local V=0 while V~=H do V=V+1 n(1000)if c.isOnline()then break end end end return c.getStatus()end function Q.login(N,r,c,G)r=r~=nil and r or false c=c or 10000 G=G~=nil and G or false L("auth:login<credential>",N,"table")L("auth:login<remove>",r,"boolean")L("auth:login<delay>",c,"number")L("auth:login<force>",G,"boolean")local l,H local V=0 local J=2 local E=10 local b=1 if r and T()then l=(T()).name while T(l)do if V>E then break end if V%J==0 then j(l)end V=V+1 n(b*1000)end end V=0 l=N.name H=N.password if l==""and H==""then l=T()and(T()).name end if not T(l)then if H==""then s(f.GUEST_ACCOUNT,true)end if N.proxy then o(l,H,N.proxy)else o(l,H)end s(f.GUEST_ACCOUNT,false)else D()end s(f.AUTO_RECONNECT,false)s(f.AUTO_LEAVE,false)if not G then local N=Q.reconnect(8,5,true)n(c)return N end n(c)end function l.format(N)L("numberutils:format<number>",N,"number")if N>=1000000 then return t("%.2fm",N*1e-006)elseif N>=1000 then return t("%.2fk",N*.001)end return tostring(N)end function l.nformat(N)L("numberutils:nformat<number>",N,"number")local Q,r=t("%0.f",N)while r~=0 do Q,r=Q:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return Q end function H.nowIso()local N=e("!*t",i())local Q=t("%d-%02d-%02dT%02d:%02d:%02dZ",N.year,N.month,N.day,N.hour,N.min,N.sec)return Q end function V.contains(N,Q)L("tableutils:contains",N,"table")if type(Q)=="string"then Q=Q:upper()end for r=1,#N,1 do local c=N[r]if type(c)=="string"then c=c:upper()end if c==Q then return true end end return false end function E.collect(N,Q,r)if p((T()).x-Q)>96 or p((T()).y-r)>96 then return false end a({type=11,int_data=N;pos_x=Q,pos_y=r})return true end function b.drop(N,Q)L("inventoryhandler:drop<item_id>",N,"number")Q=Q or P(N)if Q==0 then return end L("inventoryhandler:drop<item_count>",Q,"number")a({type=0,flags=48,pos_x=(T()).x,pos_y=(T()).y})Z(2,x.DROP_DIALOG:format(N))n(250)Z(2,x.DROP_OK:format(N,Q))n(1250)end function J.random(N,Q,r,c,G)N=N or 1 Q=Q or 1 r=r~=nil and r or false c=c~=nil and c or false G=G~=nil and G or false if not J.charset then local N=table.insert local Q={}if r then for r=48,57,1 do N(Q,string.char(r))end end for r=65,90,1 do N(Q,string.char(r))end for r=97,122,1 do N(Q,string.char(r))end J.charset=Q end local l=""for N=1,N,1 do math.randomseed(((i()*Q)*N)*(y()or 1))l=l..J.charset[math.random(1,#J.charset)]end if c then return l:upper()end if G then return l:lower()end return l end function J.randomi(N,Q)N=N or 1 Q=Q or 1 if not J.charseti then local N=table.insert local Q={}for r=48,57,1 do N(Q,string.char(r))end J.charseti=Q end local r=""for N=1,N,1 do math.randomseed(((i()*Q)*N)*(y()or 1))r=r..J.charseti[math.random(#J.charseti)]end return r end function h.sfindPath(N,Q)L("botutils:sfindpath<x>",N,"number")L("botutils:sfindpath<x>",Q,"number")local r=0 local c=10 local G=S(N,Q)while not G do if r>c then break end G=S(N,Q)if G then break end n(100)r=r+1 end return G end function h.getGuest()if not T()then return nil end local N=w()for Q=0,#N,1 do local r=N[Q]if r.name:match("_")then if(r.name:match("(.+)_%d+")):upper()==(T()).name:upper()then return r.name end end end return nil end function h.skipTutorial()local N=h.getGuest()if not N then N=J.random(13)end if N:match("_")then N=N:gsub("_","")end if not(r.getWorld()):match(".+_1_.+")then return nil end Z(2,x.TUTORIAL_POPUP_CLOSE)n(200)while not h.sfindPath(86,30)do n(1000)end O()while not(r.getWorld()):match(".+_2_.+")do n(1000)end while not h.sfindPath(46,23)do n(1000)end while(K(47,23)).fg~=0 do W(1,0)n(200)end while(K(47,23)).fg==0 do u(2,1,0)n(200)end while(K(47,23)).fg~=0 do W(1,0)n(200)end while P(3)==0 do v(3)n(250)end while(K(47,23)).fg~=0 do W(1,0)n(200)end while(K(47,23)).fg==0 do u(3,1,0)n(750)end while P(10672)==0 do n(500)end while P(10672)~=0 do u(10672,1,0)n(750)end while(K(47,23)).fg==3 do W(1,0)n(200)end while P(48)==0 do v(3)n(250)end while not C(48)do R(48)n(1000)end Z(3,x.EXIT)while not r.isInside("EXIT")do n(1000)end local Q=0 while not r.warp(N)do n(1000)N=N..Q end while P(9640)==0 do n(200)end while P(9640)~=0 do u(9640,0,-1)n(200)end for N=0,2,1 do A(J.random(1))n(1500)end end N.Auth=Q N.WorldHandler=r N.StatusHandler=c N.PacketHandler=E N.InventoryHandler=b N.TileHandler=G N.NumberUtils=l N.DateUtils=H N.TableUtils=V N.StringUtils=J N.BotUtils=h N.ItemDatabase=m N.Json=d N.Date=z N.AssertUtils={assertv=F,tassertv=L}return N