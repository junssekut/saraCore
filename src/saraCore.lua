local E={_VERSION="0.1.4",_AUTHOR="junssekut#4964",_CONTRIBUTORS={}}local M={}local K={}local O={}local d={}local r={}local C={}local o={}local u={}local e={}local k={}local f={}local G={VALUE_MISMATCH="[%s] got: %s";TYPE_MISMATCH="[%s] got: %s, expected: %s"}local Q={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0";DROP_DIALOG="action|drop\n|itemID|%d",DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit",TUTORIAL_POPUP_CLOSE="ftue_start_popup_close"}local S={SELECT_ALL="Select All";GUEST_ACCOUNT="Guest Account",EXTERNAL="External";AUTO_ACCESS="Auto Access";AUTO_RECONNECT="Auto Reconnect",AUTO_LEAVE="Auto Leave";IGNORE_GEMS="Ignore Gems"}local W=_G.getBot local c=_G.getTile local w=_G.sendPacket local B=_G.sendPacketRaw local g=_G.sleep local b=_G.connect local P=_G.request local H=_G.setBool local V=_G.removeBot local F=_G.addBot local D=_G.findItem local A=_G.getPing local h=_G.findPath local L=_G.getPlayers local I=_G.enter local t=_G.punch local Z=_G.place local l=_G.collect local a=_G.wear local R=_G.findClothes local y=_G.say local x=string.format local s=math.floor local n=math.abs local i=os.date local U=os.time local X=assert((load(P("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local m=assert((load(P("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local p=assert((load(P("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local function N(E,M)if not E then error(M or"Assertion Failed!")end return E end local function v(E,M,K)return N(type(M)==K,G.TYPE_MISMATCH:format(E,type(M),K))end function K.exit()w(3,Q.EXIT)while not K.isInside("exit")do g(1000)end end function K.warp(E,r,C,o,u)r=r or""C=C or 10 o=o or 6 u=u or 2500 v("worldhandler:warp<world>",E,"string")v("worldhandler:warp<id>",r,"string")v("worldhandler:warp<limit_tries>",C,"number")v("worldhandler:warp<after_tries>",o,"number")E=E:upper()local e=0 local k=5 while not K.isInside(E)do if not O.isOnline()then M.reconnect()end if e~=0 and e%(o*C)==0 then return false end if e%o==0 then w(3,Q.JOIN_WORLD:format(r==""and E or E..("|"..r)))end e=e+1 local d=0 while d~=k do d=d+1 g(1000)if K.isInside(E)then break end end end if E=="EXIT"or r==""then return K.isInside(E)end e=0 while d.isWhiteDoor()do if not O.isOnline()then M.reconnect()end if e~=0 and e%(o*C)==0 then return false end if e%o==0 then w(3,Q.JOIN_WORLD:format(E..("|"..r)))end e=e+1 local K=0 while K~=k do K=K+1 g(1000)if not d.isWhiteDoor()then break end end end g((k*.5)*1000)return K.isInside(E)end function K.getWorld()if not W()then return"unknown"end return(W()).world or"unknown"end function K.isInside(E)N(type(E)=="string",G.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(E)))return K.getWorld()==E end function d.isWhiteDoor()if not W()then return false end local E=c(s((W()).x*.03125),s((W()).y*.03125))return(E and E.fg or nil)==6 end function O.getStatus(E)if not W(E or nil)then return"offline"end return(W(E or nil)).status or"offline"end function O.isOnline(E,M)return(M or O.getStatus(E or nil))=="online"end function d.getx()if not W()then return nil end return s(((W()).x or 0)*.03125)end function d.gety()if not W()then return nil end return s(((W()).y or 0)*.03125)end function d.get()if not W()then return nil end return d.getx(),d.gety()end function M.reconnect(E,M,d,r)E=E or 8 M=M or 5 d=d~=nil and d or false if not r then r=function(E)if E=="onsendtoserver"then K.warp("EXIT")return end return E end end local C=0 local o=d and 1 or 6 local u=d and 7 or 5 g(math.random(0,u)*1000)while not O.isOnline()do local K=O.getStatus()if K=="suspended"then r(K)end if K=="maintenance"then r(K)end if K=="version update"then r(K)end if K=="temporary ban"then r(K)end if K=="onsendtoserver"then r(K)end if K=="aap detected"then r(K)end if K=="invalid email"then r(K)end if K=="guest error"then r(K)end if O.isOnline()then break end if C~=0 and C%(o*E)==0 then local E=0 local K=M*60 while E~=K do E=E+1 g(1000)if O.isOnline()then break end end if O.isOnline()then break end end if C%o==0 then b()end C=C+1 local d=0 while d~=u do d=d+1 g(1000)if O.isOnline()then break end end end end function M.login(E,K,O,d,r)K=K~=nil and K or false O=O or 10000 d=d~=nil and d or false v("auth:login<credential>",E,"table")v("auth:login<remove>",K,"boolean")v("auth:login<delay>",O,"number")v("auth:login<force>",d,"boolean")local C,o local u=0 local e=2 local k=10 local f=1 if K and W()then C=(W()).name while W(C)do if u>k then break end if u%e==0 then V(C)end u=u+1 g(f*1000)end end u=0 C=E.name o=E.password if C==""and o==""then C=W()and(W()).name end if not W(C)then if o==""then H(S.GUEST_ACCOUNT,true)end if E.proxy then F(C,o,E.proxy)else F(C,o)end H(S.GUEST_ACCOUNT,false)else b()end H(S.AUTO_RECONNECT,false)H(S.AUTO_LEAVE,false)if not d then M.reconnect(8,5,true,r)end g(O)end function r.format(E)v("numberutils:format<number>",E,"number")if E>=1000000 then return x("%.2fm",E*1e-006)elseif E>=1000 then return x("%.2fk",E*.001)end return tostring(E)end function r.nformat(E)v("numberutils:nformat<number>",E,"number")local M,K=x("%0.f",E)while K~=0 do M,K=M:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return M end function C.nowIso()local E=i("!*t",U())local M=x("%d-%02d-%02dT%02d:%02d:%02dZ",E.year,E.month,E.day,E.hour,E.min,E.sec)return M end function o.contains(E,M)v("tableutils:contains",E,"table")if type(M)=="string"then M=M:upper()end for K=1,#E,1 do local O=E[K]if type(O)=="string"then O=O:upper()end if O==M then return true end end return false end function e.collect(E,M,K)if n((W()).x-M)>96 or n((W()).y-K)>96 then return false end B({type=11;int_data=E;pos_x=M;pos_y=K})return true end function k.drop(E,M)v("inventoryhandler:drop<item_id>",E,"number")M=M or D(E)if M==0 then return end v("inventoryhandler:drop<item_count>",M,"number")B({type=0;flags=48,pos_x=(W()).x;pos_y=(W()).y})w(2,Q.DROP_DIALOG:format(E))g(250)w(2,Q.DROP_OK:format(E,M))g(1250)end function u.random(E,M,K,O,d)E=E or 1 M=M or 1 K=K~=nil and K or false O=O~=nil and O or false d=d~=nil and d or false if not u.charset then local E=table.insert local M={}if K then for K=48,57,1 do E(M,string.char(K))end end for K=65,90,1 do E(M,string.char(K))end for K=97,122,1 do E(M,string.char(K))end u.charset=M end local r=""for E=1,E,1 do math.randomseed(((U()*M)*E)*(A()or 1))r=r..u.charset[math.random(1,#u.charset)]end if O then return r:upper()end if d then return r:lower()end return r end function u.randomi(E,M)E=E or 1 M=M or 1 if not u.charseti then local E=table.insert local M={}for K=48,57,1 do E(M,string.char(K))end u.charseti=M end local K=""for E=1,E,1 do math.randomseed(((U()*M)*E)*(A()or 1))K=K..u.charseti[math.random(#u.charseti)]end return K end function f.sfindPath(E,M)v("botutils:sfindpath<x>",E,"number")v("botutils:sfindpath<x>",M,"number")local K=0 local O=10 local d=h(E,M)while not d do if K>O then break end d=h(E,M)if d then break end g(100)K=K+1 end return d end function f.getGuest()if not W()then return nil end local E=L()for M=0,#E,1 do local K=E[M]if K.name:match("_")then if(K.name:match("(.+)_%d+")):upper()==(W()).name:upper()then return K.name end end end return nil end function f.skipTutorial()local E=f.getGuest()if not E then E=u.random(13)end if E:match("_")then E=E:gsub("_","")end if not(K.getWorld()):match(".+_1_.+")then return nil end w(2,Q.TUTORIAL_POPUP_CLOSE)g(200)while not f.sfindPath(86,30)do g(1000)end I()while not(K.getWorld()):match(".+_2_.+")do g(1000)end while not f.sfindPath(46,23)do g(1000)end while(c(47,23)).fg~=0 do t(1,0)g(200)end while(c(47,23)).fg==0 do Z(2,1,0)g(200)end while(c(47,23)).fg~=0 do t(1,0)g(200)end while D(3)==0 do l(3)g(250)end while(c(47,23)).fg~=0 do t(1,0)g(200)end while(c(47,23)).fg==0 do Z(3,1,0)g(750)end while D(10672)==0 do g(500)end while D(10672)~=0 do Z(10672,1,0)g(750)end while(c(47,23)).fg==3 do t(1,0)g(200)end while D(48)==0 do l(3)g(250)end while not R(48)do a(48)g(1000)end w(3,Q.EXIT)while not K.isInside("EXIT")do g(1000)end local M=0 while not K.warp(E)do g(1000)E=E..M end while D(9640)==0 do g(200)end while D(9640)~=0 do Z(9640,0,-1)g(200)end for E=0,2,1 do y(u.random(1))g(1500)end end E.Auth=M E.WorldHandler=K E.StatusHandler=O E.PacketHandler=e E.InventoryHandler=k E.TileHandler=d E.NumberUtils=r E.DateUtils=C E.TableUtils=o E.StringUtils=u E.BotUtils=f E.ItemDatabase=X E.Json=m E.Date=p E.AssertUtils={assertv=N;tassertv=v}return E