local R={_VERSION="0.1.6",_AUTHOR="junssekut#4964";_CONTRIBUTORS={}}local E={}local n={}local y={}local l={}local O={}local A={}local V={}local I={}local J={}local u={}local e={}local v={}local U={}local X={VALUE_MISMATCH="[%s] got: %s";TYPE_MISMATCH="[%s] got: %s, expected: %s"}local o={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0",DROP_DIALOG="action|drop\n|itemID|%d";DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d",EXIT="action|quit_to_exit",TUTORIAL_POPUP_CLOSE="ftue_start_popup_close",TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1",INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d";INSERT_VEND_CONFIRM="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nsetprice|0\nchk_peritem|0\nchk_perlock|1",UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local p={SELECT_ALL="Select All";GUEST_ACCOUNT="Guest Account",EXTERNAL="External";AUTO_ACCESS="Auto Access";AUTO_RECONNECT="Auto Reconnect",AUTO_LEAVE="Auto Leave",IGNORE_GEMS="Ignore Gems"}local d=_G.getBot local f=_G.getTile local t=_G.sendPacket local H=_G.sendPacketRaw local F=_G.sleep local Z=_G.connect local i=_G.request local x=_G.setBool local M=_G.removeBot local b=_G.addBot local j=_G.findItem local Y=_G.getPing local W=_G.findPath local L=_G.getPlayers local Q=_G.enter local K=_G.punch local g=_G.place local r=_G.collect local P=_G.wear local c=_G.findClothes local q=_G.say local S=string.format local G=math.floor local B=math.abs local T=os.date local s=os.time local N=os.difftime local z=l.isWhiteDoor local C=y.isOnline local a=U.isFailed local k=v.isStuck local m=assert((load(i("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local D=assert((load(i("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local h=assert((load(i("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local w local Rg local function Eg(R,E)if not R then error(E or"Assertion Failed!")end return R end local function ng(R,E,n)return Eg(type(E)==n,X.TYPE_MISMATCH:format(R,type(E),n))end function n.exit()t(3,o.EXIT)while not n.isInside("exit")do F(1000)end end function U.getCaptcha()if not d()then return"unknown"end return(d()).captcha or"unknown"end function U.isFailed()return not(U.getCaptcha()):match("Solved")end function U.handleCaptcha()local R=s()disconnect()F(250)E.reconnect()return h.diff(R)end function n.warp(R,O,A,V,I)O=O or""A=A or 15 V=V or 6 I=I or 2500 ng("worldhandler:warp<world>",R,"string")ng("worldhandler:warp<id>",O,"string")ng("worldhandler:warp<limit_tries>",A,"number")ng("worldhandler:warp<after_tries>",V,"number")R=R:upper()local J=0 local u=5 while not n.isInside(R)do if not y.isOnline()then E.reconnect()end if J~=0 and J%(V*A)==0 then return false end if J%V==0 then t(3,o.JOIN_WORLD:format(O==""and R or R..("|"..O)))end J=J+1 local l=0 while l~=u do l=l+1 F(1000)if n.isInside(R)then break end end end if R=="EXIT"or O==""then return n.isInside(R)end J=0 while l.isWhiteDoor()do if not y.isOnline()then E.reconnect()end if J~=0 and J%(V*A)==0 then return false end if J%V==0 then t(3,o.JOIN_WORLD:format(R..("|"..O)))end J=J+1 local n=0 while n~=u do n=n+1 F(1000)if not l.isWhiteDoor()then break end end end F((u*.5)*1000)return n.isInside(R)end function n.getWorld()if not d()then return"unknown"end return(d()).world or"unknown"end function n.isInside(R)Eg(type(R)=="string",X.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(R)))return n.getWorld()==R end function l.isWhiteDoor()if not d()then return false end local R=f(G((d()).x*.03125),G((d()).y*.03125))return(R and R.fg or nil)==6 end function y.getStatus(R)if not d(R or nil)then return"offline"end return(d(R or nil)).status or"offline"end function y.isOnline(R,E)return(E or y.getStatus(R or nil))=="online"end function l.calculateFloating(R,E)if(f(R,E)).flags==0 then return R,E,0,0 end local n=l.getx()for y=-1,1,2 do if R+y==n then return R,E,-y,0 end end for n=-1,1,2 do if R+n>=0 and R+n<=99 then if(f(R+n,E)).flags==0 then if not W(R+n,E)then F(500)else F(150)return R,E,-n,0 end end end end for n=-1,1,1 do for y=-2,2,2 do if(R+n>=0 and R+n<=99)and(E+y>=0 and E+y<=53)then if(f(R+n,E+y)).flags==0 then if not W(R+n,E+y)then F(500)else F(150)return R,E,-n,-y end end end end end return nil end function l.getx()if not d()then return nil end return G(((d()).x or 0)*.03125)end function l.gety()if not d()then return nil end return G(((d()).y or 0)*.03125)end function l.get()if not d()then return nil end return l.getx(),l.gety()end function l.full(R,E)ng("tilehandler:full<x>",R,"number")ng("tilehandler:full<y>",E,"number")local n=V.contains local y=table.insert local l,O,A=0,{},getObjects()for A,V in pairs(A)do if(V.x>=R*32-6 and V.x<=(R+1)*32-6)and(V.y>=E*32-2 and V.y<=(E+1)*32-2)then l=l+V.count if not n(O,V.id)then y(O,V.id)end end end return l>=3800 or#O>=20 end function v.isStuck()if not C then C=y.isOnline end return(C and C()or y.isOnline())and Y()==500 end function v.handleStuck()local R=0 local E=1 local n=15 while v.isStuck()do if R%E==0 then Z()end R=R+1 local y=0 while y~=n do y=y+1 F(1000)if y~=0 and y%5~=0 then if not v.isStuck()then break end end end end end function E.c(R,O,A,V,I)I=I~=nil and I or false if not w or w and N(s(),w)>=10 then if not a then a=U.isFailed end if a()then U.handleCaptcha()end w=s()if not Rg or Rg and N(s(),Rg)>=15 then if not k then k=v.isStuck end if k()then v.handleStuck()end Rg=w end end if not C then C=y.isOnline end if not C()then E.reconnect()if(n.getWorld()):match("_")then e.skipTutorial()end if R then ng("auth:c<world>",R,"string")R=R:upper()if not n.isInside(R)then n.warp(R,O or"")end if A and V then e.sfindPath(A,V)end end end if I and(A and V)then if G((d()).x*.03125)~=A or G((d()).y*.03125)~=V then if not z then z=l.isWhiteDoor end if z()and(R and O)then n.warp(R,O)end W(A,V)end end end function E.reconnect(R,E,n)R=R or 8 E=E or 5 n=n~=nil and n or false local l=0 local O=n and 1 or 6 local A=n and 7 or 5 F(math.random(0,A)*1000)while not y.isOnline()do local n=y.getStatus()if n=="suspended"then return n end if n=="banned"then return n end if n=="maintenance"then return n end if n=="version update"then return n end if n=="temporary ban"then return n end if n=="onsendtoserver"then return n end if n=="aap detected"then return n end if n=="invalid email"then return n end if n=="guest error"then return n end if y.isOnline()then break end if l~=0 and l%(O*R)==0 then local R=0 local n=E*60 while R~=n do R=R+1 F(1000)if y.isOnline()then break end end if y.isOnline()then break end end if l%O==0 then Z()end l=l+1 local V=0 while V~=A do V=V+1 F(1000)if y.isOnline()then break end end end return y.getStatus()end function E.login(R,n,y,l)n=n~=nil and n or false y=y or 10000 l=l~=nil and l or false ng("auth:login<credential>",R,"table")ng("auth:login<remove>",n,"boolean")ng("auth:login<delay>",y,"number")ng("auth:login<force>",l,"boolean")local O,A local V=0 local I=2 local J=10 local u=1 if n and d()then O=(d()).name while d(O)do if V>J then break end if V%I==0 then M(O)end V=V+1 F(u*1000)end end V=0 O=R.name A=R.password if O==""and A==""then O=d()and(d()).name end if not d(O)then if A==""then x(p.GUEST_ACCOUNT,true)end if R.proxy then b(O,A,R.proxy)else b(O,A)end x(p.GUEST_ACCOUNT,false)else Z()end x(p.AUTO_RECONNECT,false)x(p.AUTO_LEAVE,false)if not l then local R=E.reconnect(8,5,true)F(y)return R end F(y)end function O.format(R)ng("numberutils:format<number>",R,"number")if R>=1000000 then return S("%.2fm",R*1e-006)elseif R>=1000 then return S("%.2fk",R*.001)end return tostring(R)end function O.nformat(R)ng("numberutils:nformat<number>",R,"number")local E,n=S("%0.f",R)while n~=0 do E,n=E:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return E end function A.nowIso()local R=T("!*t",s())local E=S("%d-%02d-%02dT%02d:%02d:%02dZ",R.year,R.month,R.day,R.hour,R.min,R.sec)return E end function V.contains(R,E)ng("tableutils:contains",R,"table")if type(E)=="string"then E=E:upper()end for n=1,#R,1 do local y=R[n]if type(y)=="string"then y=y:upper()end if y==E then return true end end return false end function J.collect(R,E,n)if B((d()).x-E)>96 or B((d()).y-n)>96 then return false end H({type=11,int_data=R;pos_x=E,pos_y=n})return true end function J.tvend(R,E)wrench(0,0)F(200)t(2,o.TAKE_VEND:format(R,E))F(1500)end function J.vend(R,E,n)wrench(0,0)F(200)if(f(E,n)).data~=R then t(2,o.INSERT_VEND:format(E,n,R))F(1000)t(2,o.INSERT_VEND_CONFIRM:format(E,n))else t(2,o.UPDATE_VEND:format(E,n))end F(1500)end function u.drop(R,E)ng("inventoryhandler:drop<item_id>",R,"number")E=E or j(R)if E==0 then return end ng("inventoryhandler:drop<item_count>",E,"number")H({type=0,flags=48,pos_x=(d()).x,pos_y=(d()).y})t(2,o.DROP_DIALOG:format(R))F(250)t(2,o.DROP_OK:format(R,E))F(1250)end function I.random(R,E,n,y,l)R=R or 1 E=E or 1 n=n~=nil and n or false y=y~=nil and y or false l=l~=nil and l or false if not I.charset then local R=table.insert local E={}if n then for n=48,57,1 do R(E,string.char(n))end end for n=65,90,1 do R(E,string.char(n))end for n=97,122,1 do R(E,string.char(n))end I.charset=E end local O=""for R=1,R,1 do math.randomseed(((s()*E)*R)*(Y()or 1))O=O..I.charset[math.random(1,#I.charset)]end if y then return O:upper()end if l then return O:lower()end return O end function I.randomi(R,E)R=R or 1 E=E or 1 if not I.charseti then local R=table.insert local E={}for n=48,57,1 do R(E,string.char(n))end I.charseti=E end local n=""for R=1,R,1 do math.randomseed(((s()*E)*R)*(Y()or 1))n=n..I.charseti[math.random(#I.charseti)]end return n end function e.sfindPath(R,E)ng("botutils:sfindpath<x>",R,"number")ng("botutils:sfindpath<x>",E,"number")local n=0 local y=10 local l=W(R,E)while not l do if n>y then break end l=W(R,E)if l then break end F(100)n=n+1 end return l end function e.getGuest()if not d()then return nil end local R=L()for E=0,#R,1 do local n=R[E]if n.name:match("_")then if(n.name:match("(.+)_%d+")):upper()==(d()).name:upper()then return n.name end end end return nil end function e.skipTutorial()local R=e.getGuest()if not R then R=I.random(13)end if R:match("_")then R=R:gsub("_","")end if not(n.getWorld()):match(".+_1_.+")then return nil end t(2,o.TUTORIAL_POPUP_CLOSE)F(200)while not e.sfindPath(86,30)do F(1000)end Q()while not(n.getWorld()):match(".+_2_.+")do F(1000)end while not e.sfindPath(46,23)do F(1000)end while(f(47,23)).fg~=0 do K(1,0)F(200)end while(f(47,23)).fg==0 do g(2,1,0)F(200)end while(f(47,23)).fg~=0 do K(1,0)F(200)end while j(3)==0 do r(3)F(250)end while(f(47,23)).fg~=0 do K(1,0)F(200)end while(f(47,23)).fg==0 do g(3,1,0)F(750)end while j(10672)==0 do F(500)end while j(10672)~=0 do g(10672,1,0)F(750)end while(f(47,23)).fg==3 do K(1,0)F(200)end while j(48)==0 do r(3)F(250)end while not c(48)do P(48)F(1000)end t(3,o.EXIT)while not n.isInside("EXIT")do F(1000)end local E=0 while not n.warp(R)do F(1000)R=R..E end while j(9640)==0 do F(200)end while j(9640)~=0 do g(9640,0,-1)F(200)end for R=0,2,1 do q(I.random(1))F(1500)end end R.Auth=E R.WorldHandler=n R.StatusHandler=y R.PacketHandler=J R.InventoryHandler=u R.TileHandler=l R.NumberUtils=O R.DateUtils=A R.TableUtils=V R.StringUtils=I R.BotUtils=e R.PingHandler=v R.CaptchaHandler=U R.ItemDatabase=m R.Json=D R.Date=h R.AssertUtils={assertv=Eg,tassertv=ng}return R