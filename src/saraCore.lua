local s={_VERSION="0.1.4";_AUTHOR="junssekut#4964";_CONTRIBUTORS={}}local P={}local b={}local u={}local O={}local Y={}local M={}local r={}local e={}local G={}local k={}local f={}local J={VALUE_MISMATCH="[%s] got: %s",TYPE_MISMATCH="[%s] got: %s, expected: %s"}local y={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0";DROP_DIALOG="action|drop\n|itemID|%d";DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d",EXIT="action|quit_to_exit",TUTORIAL_POPUP_CLOSE="ftue_start_popup_close"}local I={SELECT_ALL="Select All",GUEST_ACCOUNT="Guest Account";EXTERNAL="External",AUTO_ACCESS="Auto Access",AUTO_RECONNECT="Auto Reconnect";AUTO_LEAVE="Auto Leave",IGNORE_GEMS="Ignore Gems"}local R=_G.getBot local N=_G.getTile local E=_G.sendPacket local x=_G.sendPacketRaw local U=_G.sleep local T=_G.connect local o=_G.request local t=_G.setBool local B=_G.removeBot local w=_G.addBot local A=_G.findItem local m=_G.getPing local j=_G.findPath local F=_G.getPlayers local a=_G.enter local c=_G.punch local q=_G.place local L=_G.collect local X=_G.wear local H=_G.findClothes local D=_G.say local v=string.format local p=math.floor local d=math.abs local z=os.date local h=os.time local Q=assert((load(o("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local K=assert((load(o("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local i=assert((load(o("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local function l(s,P)if not s then error(P or"Assertion Failed!")end return s end local function C(s,P,b)return l(type(P)==b,J.TYPE_MISMATCH:format(s,type(P),b))end function b.exit()E(3,y.EXIT)while not b.isInside("exit")do U(1000)end end function b.warp(s,Y,M,r,e)Y=Y or""M=M or 10 r=r or 6 e=e or 2500 C("worldhandler:warp<world>",s,"string")C("worldhandler:warp<id>",Y,"string")C("worldhandler:warp<limit_tries>",M,"number")C("worldhandler:warp<after_tries>",r,"number")s=s:upper()local G=0 local k=5 while not b.isInside(s)do if not u.isOnline()then P.reconnect()end if G~=0 and G%(r*M)==0 then return false end if G%r==0 then E(3,y.JOIN_WORLD:format(Y==""and s or s..("|"..Y)))end G=G+1 local O=0 while O~=k do O=O+1 U(1000)if b.isInside(s)then break end end end if s=="EXIT"or Y==""then return b.isInside(s)end G=0 while O.isWhiteDoor()do if not u.isOnline()then P.reconnect()end if G~=0 and G%(r*M)==0 then return false end if G%r==0 then E(3,y.JOIN_WORLD:format(s..("|"..Y)))end G=G+1 local b=0 while b~=k do b=b+1 U(1000)if not O.isWhiteDoor()then break end end end U((k*.5)*1000)return b.isInside(s)end function b.getWorld()if not R()then return"unknown"end return(R()).world or"unknown"end function b.isInside(s)l(type(s)=="string",J.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(s)))return b.getWorld()==s end function O.isWhiteDoor()if not R()then return false end local s=N(p((R()).x*.03125),p((R()).y*.03125))return(s and s.fg or nil)==6 end function u.getStatus(s)if not R(s or nil)then return"offline"end return(R(s or nil)).status or"offline"end function u.isOnline(s,P)return(P or u.getStatus(s or nil))=="online"end function O.getx()if not R()then return nil end return p(((R()).x or 0)*.03125)end function O.gety()if not R()then return nil end return p(((R()).y or 0)*.03125)end function O.get()if not R()then return nil end return O.getx(),O.gety()end function P.reconnect(s,P,O,Y)s=s or 8 P=P or 5 O=O~=nil and O or false if not Y then Y=function(s)if s=="onsendtoserver"then b.warp("EXIT")return end error(s,0)end end local M=0 local r=O and 1 or 6 local e=O and 7 or 5 U(math.random(0,e)*1000)while not u.isOnline()do local b=u.getStatus()if b=="suspended"then Y(b)end if b=="maintenance"then Y(b)end if b=="version update"then Y(b)end if b=="temporary ban"then Y(b)end if b=="onsendtoserver"then Y(b)end if b=="aap detected"then Y(b)end if b=="invalid email"then Y(b)end if b=="guest error"then Y(b)end if u.isOnline()then break end if M~=0 and M%(r*s)==0 then local s=0 local b=P*60 while s~=b do s=s+1 U(1000)if u.isOnline()then break end end if u.isOnline()then break end end if M%r==0 then T()end M=M+1 local O=0 while O~=e do O=O+1 U(1000)if u.isOnline()then break end end end end function P.login(s,b,u,O,Y)b=b~=nil and b or false u=u or 10000 O=O~=nil and O or false C("auth:login<credential>",s,"table")C("auth:login<remove>",b,"boolean")C("auth:login<delay>",u,"number")C("auth:login<force>",O,"boolean")local M,r local e=0 local G=2 local k=10 local f=1 if b and R()then M=(R()).name while R(M)do if e>k then break end if e%G==0 then B(M)end e=e+1 U(f*1000)end end e=0 M=s.name r=s.password if M==""and r==""then M=R()and(R()).name end if not R(M)then if r==""then t(I.GUEST_ACCOUNT,true)end if s.proxy then w(M,r,s.proxy)else w(M,r)end t(I.GUEST_ACCOUNT,false)else T()end t(I.AUTO_RECONNECT,false)t(I.AUTO_LEAVE,false)if not O then P.reconnect(8,5,true,Y)end U(u)end function Y.format(s)C("numberutils:format<number>",s,"number")if s>=1000000 then return v("%.2fm",s*1e-006)elseif s>=1000 then return v("%.2fk",s*.001)end return tostring(s)end function Y.nformat(s)C("numberutils:nformat<number>",s,"number")local P,b=v("%0.f",s)while b~=0 do P,b=P:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return P end function M.nowIso()local s=z("!*t",h())local P=v("%d-%02d-%02dT%02d:%02d:%02dZ",s.year,s.month,s.day,s.hour,s.min,s.sec)return P end function r.contains(s,P)C("tableutils:contains",s,"table")if type(P)=="string"then P=P:upper()end for b=1,#s,1 do local u=s[b]if type(u)=="string"then u=u:upper()end if u==P then return true end end return false end function G.collect(s,P,b)if d((R()).x-P)>96 or d((R()).y-b)>96 then return false end x({type=11,int_data=s;pos_x=P,pos_y=b})return true end function k.drop(s,P)C("inventoryhandler:drop<item_id>",s,"number")P=P or A(s)if P==0 then return end C("inventoryhandler:drop<item_count>",P,"number")x({type=0,flags=48,pos_x=(R()).x,pos_y=(R()).y})E(2,y.DROP_DIALOG:format(s))U(250)E(2,y.DROP_OK:format(s,P))U(1250)end function e.random(s,P,b,u,O)s=s or 1 P=P or 1 b=b~=nil and b or false u=u~=nil and u or false O=O~=nil and O or false if not e.charset then local s=table.insert local P={}if b then for b=48,57,1 do s(P,string.char(b))end end for b=65,90,1 do s(P,string.char(b))end for b=97,122,1 do s(P,string.char(b))end e.charset=P end local Y=""for s=1,s,1 do math.randomseed(((h()*P)*s)*(m()or 1))Y=Y..e.charset[math.random(1,#e.charset)]end if u then return Y:upper()end if O then return Y:lower()end return Y end function e.randomi(s,P)s=s or 1 P=P or 1 if not e.charseti then local s=table.insert local P={}for b=48,57,1 do s(P,string.char(b))end e.charseti=P end local b=""for s=1,s,1 do math.randomseed(((h()*P)*s)*(m()or 1))b=b..e.charseti[math.random(#e.charseti)]end return b end function f.sfindPath(s,P)C("botutils:sfindpath<x>",s,"number")C("botutils:sfindpath<x>",P,"number")local b=0 local u=10 local O=j(s,P)while not O do if b>u then break end O=j(s,P)if O then break end U(100)b=b+1 end return O end function f.getGuest()if not R()then return nil end local s=F()for P=0,#s,1 do local b=s[P]if b.name:match("_")then if(b.name:match("(.+)_%d+")):upper()==(R()).name:upper()then return b.name end end end return nil end function f.skipTutorial()local s=f.getGuest()if not s then s=e.random(13)end if s:match("_")then s=s:gsub("_","")end if not(b.getWorld()):match(".+_1_.+")then return nil end E(2,y.TUTORIAL_POPUP_CLOSE)U(200)while not f.sfindPath(86,30)do U(1000)end a()while not(b.getWorld()):match(".+_2_.+")do U(1000)end while not f.sfindPath(46,23)do U(1000)end while(N(47,23)).fg~=0 do c(1,0)U(200)end while(N(47,23)).fg==0 do q(2,1,0)U(200)end while(N(47,23)).fg~=0 do c(1,0)U(200)end while A(3)==0 do L(3)U(250)end while(N(47,23)).fg~=0 do c(1,0)U(200)end while(N(47,23)).fg==0 do q(3,1,0)U(750)end while A(10672)==0 do U(500)end while A(10672)~=0 do q(10672,1,0)U(750)end while(N(47,23)).fg==3 do c(1,0)U(200)end while A(48)==0 do L(3)U(250)end while not H(48)do X(48)U(1000)end E(3,y.EXIT)while not b.isInside("EXIT")do U(1000)end local P=0 while not b.warp(s)do U(1000)s=s..P end while A(9640)==0 do U(200)end while A(9640)~=0 do q(9640,0,-1)U(200)end for s=0,2,1 do D(e.random(1))U(1500)end end s.Auth=P s.WorldHandler=b s.StatusHandler=u s.PacketHandler=G s.InventoryHandler=k s.TileHandler=O s.NumberUtils=Y s.DateUtils=M s.TableUtils=r s.StringUtils=e s.BotUtils=f s.ItemDatabase=Q s.Json=K s.Date=i s.AssertUtils={assertv=l;tassertv=C}return s