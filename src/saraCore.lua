local H={_VERSION="0.1.5";_AUTHOR="junssekut#4964",_CONTRIBUTORS={}}local s={}local F={}local W={}local b={}local S={}local L={}local Y={}local V={}local U={}local A={}local B={}local K={}local I={}local c={VALUE_MISMATCH="[%s] got: %s",TYPE_MISMATCH="[%s] got: %s, expected: %s"}local M={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0";DROP_DIALOG="action|drop\n|itemID|%d";DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit";TUTORIAL_POPUP_CLOSE="ftue_start_popup_close"}local h={SELECT_ALL="Select All",GUEST_ACCOUNT="Guest Account";EXTERNAL="External";AUTO_ACCESS="Auto Access",AUTO_RECONNECT="Auto Reconnect",AUTO_LEAVE="Auto Leave";IGNORE_GEMS="Ignore Gems"}local m=_G.getBot local J=_G.getTile local e=_G.sendPacket local j=_G.sendPacketRaw local q=_G.sleep local d=_G.connect local G=_G.request local O=_G.setBool local X=_G.removeBot local w=_G.addBot local D=_G.findItem local x=_G.getPing local t=_G.findPath local z=_G.getPlayers local g=_G.enter local C=_G.punch local T=_G.place local k=_G.collect local v=_G.wear local f=_G.findClothes local y=_G.say local l=string.format local n=math.floor local p=math.abs local Z=os.date local a=os.time local r=os.difftime local R=b.isWhiteDoor local Q=W.isOnline local N=I.isFailed local E=K.isStuck local u=assert((load(G("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local o=assert((load(G("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local P=assert((load(G("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local i local HA local function sA(H,s)if not H then error(s or"Assertion Failed!")end return H end local function FA(H,s,F)return sA(type(s)==F,c.TYPE_MISMATCH:format(H,type(s),F))end function F.exit()e(3,M.EXIT)while not F.isInside("exit")do q(1000)end end function I.getCaptcha()if not m()then return"unknown"end return(m()).captcha or"unknown"end function I.isFailed()return not(I.getCaptcha()):match("Solved")end function I.handleCaptcha()local H=a()disconnect()q(250)s.reconnect()return P.diff(H)end function F.warp(H,S,L,Y,V)S=S or""L=L or 15 Y=Y or 6 V=V or 2500 FA("worldhandler:warp<world>",H,"string")FA("worldhandler:warp<id>",S,"string")FA("worldhandler:warp<limit_tries>",L,"number")FA("worldhandler:warp<after_tries>",Y,"number")H=H:upper()local U=0 local A=5 while not F.isInside(H)do if not W.isOnline()then s.reconnect()end if U~=0 and U%(Y*L)==0 then return false end if U%Y==0 then e(3,M.JOIN_WORLD:format(S==""and H or H..("|"..S)))end U=U+1 local b=0 while b~=A do b=b+1 q(1000)if F.isInside(H)then break end end end if H=="EXIT"or S==""then return F.isInside(H)end U=0 while b.isWhiteDoor()do if not W.isOnline()then s.reconnect()end if U~=0 and U%(Y*L)==0 then return false end if U%Y==0 then e(3,M.JOIN_WORLD:format(H..("|"..S)))end U=U+1 local F=0 while F~=A do F=F+1 q(1000)if not b.isWhiteDoor()then break end end end q((A*.5)*1000)return F.isInside(H)end function F.getWorld()if not m()then return"unknown"end return(m()).world or"unknown"end function F.isInside(H)sA(type(H)=="string",c.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(H)))return F.getWorld()==H end function b.isWhiteDoor()if not m()then return false end local H=J(n((m()).x*.03125),n((m()).y*.03125))return(H and H.fg or nil)==6 end function W.getStatus(H)if not m(H or nil)then return"offline"end return(m(H or nil)).status or"offline"end function W.isOnline(H,s)return(s or W.getStatus(H or nil))=="online"end function b.calculateFloating(H,s)if(J(H,s)).flags==0 then return H,s,0,0 end local F=b.getx()for W=-1,1,2 do if H+W==F then return H,s,-W,0 end end for F=-1,1,2 do if H+F>=0 and H+F<=99 then if(J(H+F,s)).flags==0 then if not t(H+F,s)then q(500)else q(150)return H,s,-F,0 end end end end for F=-1,1,1 do for W=-2,2,2 do if(H+F>=0 and H+F<=99)and(s+W>=0 and s+W<=53)then if(J(H+F,s+W)).flags==0 then if not t(H+F,s+W)then q(500)else q(150)return H,s,-F,-W end end end end end return nil end function b.getx()if not m()then return nil end return n(((m()).x or 0)*.03125)end function b.gety()if not m()then return nil end return n(((m()).y or 0)*.03125)end function b.get()if not m()then return nil end return b.getx(),b.gety()end function K.isStuck()return(Q and Q()or W.isOnline())and x()==500 end function K.handleStuck()local H=0 local s=1 local F=15 while K.isStuck()do if H%s==0 then d()end H=H+1 local W=0 while W~=F do W=W+1 q(1000)if W~=0 and W%5~=0 then if not K.isStuck()then break end end end end end function s.c(H,W,b,S,L)L=L~=nil and L or false if not i or i and r(a(),i)>=10 then if N()then I.handleCaptcha()end i=a()if not HA or HA and r(a(),HA)>=15 then if E()then K.handleStuck()end HA=i end end if not Q()then s.reconnect()if(F.getWorld()):match("_")then B.skipTutorial()end if H then FA("auth:c<world>",H,"string")H=H:upper()if not F.isInside(H)then F.warp(H,W or"")end if b and S then B.sfindPath(b,S)end end end if L and(b and S)then if n((m()).x*.03125)~=b or n((m()).y*.03125)~=S then if R()and(H and W)then F.warp(H,W)end t(b,S)end end end function s.reconnect(H,s,F)H=H or 8 s=s or 5 F=F~=nil and F or false local b=0 local S=F and 1 or 6 local L=F and 7 or 5 q(math.random(0,L)*1000)while not W.isOnline()do local F=W.getStatus()if F=="suspended"then return F end if F=="banned"then return F end if F=="maintenance"then return F end if F=="version update"then return F end if F=="temporary ban"then return F end if F=="onsendtoserver"then return F end if F=="aap detected"then return F end if F=="invalid email"then return F end if F=="guest error"then return F end if W.isOnline()then break end if b~=0 and b%(S*H)==0 then local H=0 local F=s*60 while H~=F do H=H+1 q(1000)if W.isOnline()then break end end if W.isOnline()then break end end if b%S==0 then d()end b=b+1 local Y=0 while Y~=L do Y=Y+1 q(1000)if W.isOnline()then break end end end return W.getStatus()end function s.login(H,F,W,b)F=F~=nil and F or false W=W or 10000 b=b~=nil and b or false FA("auth:login<credential>",H,"table")FA("auth:login<remove>",F,"boolean")FA("auth:login<delay>",W,"number")FA("auth:login<force>",b,"boolean")local S,L local Y=0 local V=2 local U=10 local A=1 if F and m()then S=(m()).name while m(S)do if Y>U then break end if Y%V==0 then X(S)end Y=Y+1 q(A*1000)end end Y=0 S=H.name L=H.password if S==""and L==""then S=m()and(m()).name end if not m(S)then if L==""then O(h.GUEST_ACCOUNT,true)end if H.proxy then w(S,L,H.proxy)else w(S,L)end O(h.GUEST_ACCOUNT,false)else d()end O(h.AUTO_RECONNECT,false)O(h.AUTO_LEAVE,false)if not b then local H=s.reconnect(8,5,true)q(W)return H end q(W)end function S.format(H)FA("numberutils:format<number>",H,"number")if H>=1000000 then return l("%.2fm",H*1e-006)elseif H>=1000 then return l("%.2fk",H*.001)end return tostring(H)end function S.nformat(H)FA("numberutils:nformat<number>",H,"number")local s,F=l("%0.f",H)while F~=0 do s,F=s:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return s end function L.nowIso()local H=Z("!*t",a())local s=l("%d-%02d-%02dT%02d:%02d:%02dZ",H.year,H.month,H.day,H.hour,H.min,H.sec)return s end function Y.contains(H,s)FA("tableutils:contains",H,"table")if type(s)=="string"then s=s:upper()end for F=1,#H,1 do local W=H[F]if type(W)=="string"then W=W:upper()end if W==s then return true end end return false end function U.collect(H,s,F)if p((m()).x-s)>96 or p((m()).y-F)>96 then return false end j({type=11,int_data=H;pos_x=s;pos_y=F})return true end function A.drop(H,s)FA("inventoryhandler:drop<item_id>",H,"number")s=s or D(H)if s==0 then return end FA("inventoryhandler:drop<item_count>",s,"number")j({type=0,flags=48,pos_x=(m()).x;pos_y=(m()).y})e(2,M.DROP_DIALOG:format(H))q(250)e(2,M.DROP_OK:format(H,s))q(1250)end function V.random(H,s,F,W,b)H=H or 1 s=s or 1 F=F~=nil and F or false W=W~=nil and W or false b=b~=nil and b or false if not V.charset then local H=table.insert local s={}if F then for F=48,57,1 do H(s,string.char(F))end end for F=65,90,1 do H(s,string.char(F))end for F=97,122,1 do H(s,string.char(F))end V.charset=s end local S=""for H=1,H,1 do math.randomseed(((a()*s)*H)*(x()or 1))S=S..V.charset[math.random(1,#V.charset)]end if W then return S:upper()end if b then return S:lower()end return S end function V.randomi(H,s)H=H or 1 s=s or 1 if not V.charseti then local H=table.insert local s={}for F=48,57,1 do H(s,string.char(F))end V.charseti=s end local F=""for H=1,H,1 do math.randomseed(((a()*s)*H)*(x()or 1))F=F..V.charseti[math.random(#V.charseti)]end return F end function B.sfindPath(H,s)FA("botutils:sfindpath<x>",H,"number")FA("botutils:sfindpath<x>",s,"number")local F=0 local W=10 local b=t(H,s)while not b do if F>W then break end b=t(H,s)if b then break end q(100)F=F+1 end return b end function B.getGuest()if not m()then return nil end local H=z()for s=0,#H,1 do local F=H[s]if F.name:match("_")then if(F.name:match("(.+)_%d+")):upper()==(m()).name:upper()then return F.name end end end return nil end function B.skipTutorial()local H=B.getGuest()if not H then H=V.random(13)end if H:match("_")then H=H:gsub("_","")end if not(F.getWorld()):match(".+_1_.+")then return nil end e(2,M.TUTORIAL_POPUP_CLOSE)q(200)while not B.sfindPath(86,30)do q(1000)end g()while not(F.getWorld()):match(".+_2_.+")do q(1000)end while not B.sfindPath(46,23)do q(1000)end while(J(47,23)).fg~=0 do C(1,0)q(200)end while(J(47,23)).fg==0 do T(2,1,0)q(200)end while(J(47,23)).fg~=0 do C(1,0)q(200)end while D(3)==0 do k(3)q(250)end while(J(47,23)).fg~=0 do C(1,0)q(200)end while(J(47,23)).fg==0 do T(3,1,0)q(750)end while D(10672)==0 do q(500)end while D(10672)~=0 do T(10672,1,0)q(750)end while(J(47,23)).fg==3 do C(1,0)q(200)end while D(48)==0 do k(3)q(250)end while not f(48)do v(48)q(1000)end e(3,M.EXIT)while not F.isInside("EXIT")do q(1000)end local s=0 while not F.warp(H)do q(1000)H=H..s end while D(9640)==0 do q(200)end while D(9640)~=0 do T(9640,0,-1)q(200)end for H=0,2,1 do y(V.random(1))q(1500)end end H.Auth=s H.WorldHandler=F H.StatusHandler=W H.PacketHandler=U H.InventoryHandler=A H.TileHandler=b H.NumberUtils=S H.DateUtils=L H.TableUtils=Y H.StringUtils=V H.BotUtils=B H.PingHandler=K H.CaptchaHandler=I H.ItemDatabase=u H.Json=o H.Date=P H.AssertUtils={assertv=sA,tassertv=FA}return H