local r={_VERSION="0.1.6",_AUTHOR="junssekut#4964",_CONTRIBUTORS={}}local g={}local d={}local W={}local N={}local E={}local X={}local x={}local H={}local D={}local s={}local K={}local F={}local y={}local u={}local w={VALUE_MISMATCH="[%s] got: %s",TYPE_MISMATCH="[%s] got: %s, expected: %s"}local k={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0";DROP_DIALOG="action|drop\n|itemID|%d",DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit";TUTORIAL_POPUP_CLOSE="ftue_start_popup_close",TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1",INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d";UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local Y={SELECT_ALL="Select All";GUEST_ACCOUNT="Guest Account",EXTERNAL="External",AUTO_ACCESS="Auto Access",AUTO_RECONNECT="Auto Reconnect",AUTO_LEAVE="Auto Leave",IGNORE_GEMS="Ignore Gems"}local J=_G.getBot local q=_G.getTile local P=_G.sendPacket local b=_G.sendPacketRaw local B=_G.sleep local A=_G.connect local m=_G.request local T=_G.setBool local o=_G.removeBot local p=_G.addBot local e=_G.findItem local S=_G.getPing local l=_G.findPath local j=_G.getPlayers local V=_G.enter local v=_G.punch local c=_G.place local G=_G.collect local L=_G.wear local n=_G.findClothes local O=_G.say local U=string.format local M=math.floor local Q=math.abs local I=os.date local t=os.time local z=os.difftime local C=N.isWhiteDoor local f=W.isOnline local Z=y.isFailed local a=F.isStuck local h=assert((load(m("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local R=assert((load(m("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local i=assert((load(m("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local r_ local g_ local function d_(r,g)if not r then error(g or"Assertion Failed!")end return r end local function W_(r,g,d)return d_(type(g)==d,w.TYPE_MISMATCH:format(r,type(g),d))end function d.exit()P(3,k.EXIT)while not d.isInside("exit")do B(1000)end end function y.getCaptcha()if not J()then return"unknown"end return(J()).captcha or"unknown"end function y.isFailed()return not(y.getCaptcha()):match("Solved")end function y.handleCaptcha()local r=t()disconnect()B(250)g.reconnect()return i.diff(r)end function d.warp(r,E,X,x,H)E=E or""X=X or 15 x=x or 6 H=H or 5000 W_("worldhandler:warp<world>",r,"string")W_("worldhandler:warp<id>",E,"string")W_("worldhandler:warp<limit_tries>",X,"number")W_("worldhandler:warp<after_tries>",x,"number")r=r:upper()local D=0 local s=5 while not d.isInside(r)do if not W.isOnline()then g.reconnect()end if D~=0 and D%(x*X)==0 then return false end if D%x==0 then P(3,k.JOIN_WORLD:format(E==""and r or r..("|"..E)))end D=D+1 local N=0 while N~=s do N=N+1 B(1000)if d.isInside(r)then break end end end if r=="EXIT"or E==""then return d.isInside(r)end D=0 while N.isWhiteDoor()do if not W.isOnline()then g.reconnect()end if D~=0 and D%(x*X)==0 then return false end if D%x==0 then P(3,k.JOIN_WORLD:format(r..("|"..E)))end D=D+1 local d=0 while d~=s do d=d+1 B(1000)if not N.isWhiteDoor()then break end end end B(s)return d.isInside(r)end function d.getWorld()if not J()then return"unknown"end return(J()).world or"unknown"end function d.isInside(r)d_(type(r)=="string",w.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(r)))return d.getWorld()==r end function N.isWhiteDoor()if not J()then return false end local r=q(M((J()).x*.03125),M((J()).y*.03125))return(r and r.fg or nil)==6 end function W.getStatus(r)if not J(r or nil)then return"offline"end return(J(r or nil)).status or"offline"end function W.isOnline(r,g)return(g or W.getStatus(r or nil))=="online"end function N.calculateFloating(r,g)if(q(r,g)).flags==0 then return r,g,0,0 end local d=N.getx()for W=-1,1,2 do if r+W==d then return r,g,-W,0 end end for d=-1,1,2 do if r+d>=0 and r+d<=99 then if(q(r+d,g)).flags==0 then if not l(r+d,g)then B(500)else B(150)return r,g,-d,0 end end end end for d=-1,1,1 do for W=-2,2,2 do if(r+d>=0 and r+d<=99)and(g+W>=0 and g+W<=53)then if(q(r+d,g+W)).flags==0 then if not l(r+d,g+W)then B(500)else B(150)return r,g,-d,-W end end end end end return nil end function N.getx()if not J()then return nil end return M(((J()).x or 0)*.03125)end function N.gety()if not J()then return nil end return M(((J()).y or 0)*.03125)end function N.get()if not J()then return nil end return N.getx(),N.gety()end function N.full(r,g)W_("tilehandler:full<x>",r,"number")W_("tilehandler:full<y>",g,"number")local d=x.contains local W=table.insert local N,E,X=0,{},getObjects()for X,x in pairs(X)do if(x.x>=r*32-6 and x.x<=(r+1)*32-6)and(x.y>=g*32-2 and x.y<=(g+1)*32-2)then N=N+x.count if not d(E,x.id)then W(E,x.id)end end end return N>=3800 or#E>=20 end function F.isStuck()if not f then f=W.isOnline end return(f and f()or W.isOnline())and S()==500 end function F.handleStuck()local r=0 local g=1 local d=15 while F.isStuck()do if r%g==0 then A()end r=r+1 local W=0 while W~=d do W=W+1 B(1000)if W~=0 and W%5~=0 then if not F.isStuck()then break end end end end end function g.c(r,E,X,x,H)H=H~=nil and H or false if not r_ or r_ and z(t(),r_)>=10 then if not Z then Z=y.isFailed end if Z()then y.handleCaptcha()end r_=t()if not g_ or g_ and z(t(),g_)>=15 then if not a then a=F.isStuck end if a()then F.handleStuck()end g_=r_ end end if not f then f=W.isOnline end if not f()then g.reconnect()if(d.getWorld()):match("_")then K.skipTutorial()end if r then W_("auth:c<world>",r,"string")r=r:upper()if not d.isInside(r)then d.warp(r,E or"")end if X and x then K.sfindPath(X,x)end end end if H and(X and x)then if M((J()).x*.03125)~=X or M((J()).y*.03125)~=x then if not C then C=N.isWhiteDoor end if C()and(r and E)then d.warp(r,E)end l(X,x)end end end function g.reconnect(r,g,d)r=r or 8 g=g or 5 d=d~=nil and d or false local N=0 local E=d and 1 or 6 local X=d and 7 or 5 B(math.random(0,X)*1000)while not W.isOnline()do local d=W.getStatus()if d=="suspended"then return d end if d=="banned"then return d end if d=="maintenance"then return d end if d=="version update"then return d end if d=="temporary ban"then return d end if d=="onsendtoserver"then return d end if d=="aap detected"then return d end if d=="invalid email"then return d end if d=="guest error"then return d end if W.isOnline()then break end if N~=0 and N%(E*r)==0 then local r=0 local d=g*60 while r~=d do r=r+1 B(1000)if W.isOnline()then break end end if W.isOnline()then break end end if N%E==0 then A()end N=N+1 local x=0 while x~=X do x=x+1 B(1000)if W.isOnline()then break end end end return W.getStatus()end function g.login(r,d,W,N)d=d~=nil and d or false W=W or 10000 N=N~=nil and N or false W_("auth:login<credential>",r,"table")W_("auth:login<remove>",d,"boolean")W_("auth:login<delay>",W,"number")W_("auth:login<force>",N,"boolean")local E,X local x=0 local H=2 local D=10 local s=1 if d and J()then E=(J()).name while J(E)do if x>D then break end if x%H==0 then o(E)end x=x+1 B(s*1000)end end x=0 E=r.name X=r.password if E==""and X==""then E=J()and(J()).name end if not J(E)then if X==""then T(Y.GUEST_ACCOUNT,true)end if r.proxy then p(E,X,r.proxy)else p(E,X)end T(Y.GUEST_ACCOUNT,false)else A()end T(Y.AUTO_RECONNECT,false)T(Y.AUTO_LEAVE,false)if not N then local r=g.reconnect(8,5,true)B(W)return r end B(W)end function E.format(r)W_("numberutils:format<number>",r,"number")if r>=1000000 then return U("%.2fm",r*1e-006)elseif r>=1000 then return U("%.2fk",r*.001)end return tostring(r)end function E.nformat(r)W_("numberutils:nformat<number>",r,"number")local g,d=U("%0.f",r)while d~=0 do g,d=g:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return g end function X.nowIso()local r=I("!*t",t())local g=U("%d-%02d-%02dT%02d:%02d:%02dZ",r.year,r.month,r.day,r.hour,r.min,r.sec)return g end function x.contains(r,g)W_("tableutils:contains",r,"table")if type(g)=="string"then g=g:upper()end for d=1,#r,1 do local W=r[d]if type(W)=="string"then W=W:upper()end if W==g then return true end end return false end function D.collect(r,g,d)if Q((J()).x-g)>96 or Q((J()).y-d)>96 then return false end b({type=11;int_data=r;pos_x=g,pos_y=d})return true end function D.tvend(r,g)wrench(0,0)B(200)P(2,k.TAKE_VEND:format(r,g))B(1500)end function D.vend(r,g,d)wrench(0,0)B(200)if(q(g,d)).data==0 then P(2,k.INSERT_VEND:format(g,d,r))else P(2,k.UPDATE_VEND:format(g,d))end B(1500)end function s.drop(r,g)W_("inventoryhandler:drop<item_id>",r,"number")g=g or e(r)if g==0 then return end W_("inventoryhandler:drop<item_count>",g,"number")b({type=0,flags=48,pos_x=(J()).x,pos_y=(J()).y})P(2,k.DROP_DIALOG:format(r))B(250)P(2,k.DROP_OK:format(r,g))B(1250)end function H.random(r,g,d,W,N)r=r or 1 g=g or 1 d=d~=nil and d or false W=W~=nil and W or false N=N~=nil and N or false if not H.charset then local r=table.insert local g={}if d then for d=48,57,1 do r(g,string.char(d))end end for d=65,90,1 do r(g,string.char(d))end for d=97,122,1 do r(g,string.char(d))end H.charset=g end local E=""for r=1,r,1 do math.randomseed(((t()*g)*r)*(S()or 1))E=E..H.charset[math.random(1,#H.charset)]end if W then return E:upper()end if N then return E:lower()end return E end function H.randomi(r,g)r=r or 1 g=g or 1 if not H.charseti then local r=table.insert local g={}for d=48,57,1 do r(g,string.char(d))end H.charseti=g end local d=""for r=1,r,1 do math.randomseed(((t()*g)*r)*(S()or 1))d=d..H.charseti[math.random(#H.charseti)]end return d end function K.sfindPath(r,g)W_("botutils:sfindpath<x>",r,"number")W_("botutils:sfindpath<x>",g,"number")local d=0 local W=10 local N=l(r,g)while not N do if d>W then break end N=l(r,g)if N then break end B(100)d=d+1 end return N end function K.getGuest()if not J()then return nil end local r=j()for g=0,#r,1 do local d=r[g]if d.name:match("_")then if(d.name:match("(.+)_%d+")):upper()==(J()).name:upper()then return d.name end end end return nil end function K.skipTutorial()local r=K.getGuest()if not r then r=H.random(13)end if r:match("_")then r=r:gsub("_","")end if not(d.getWorld()):match(".+_1_.+")then return nil end P(2,k.TUTORIAL_POPUP_CLOSE)B(200)while not K.sfindPath(86,30)do B(1000)end V()while not(d.getWorld()):match(".+_2_.+")do B(1000)end while not K.sfindPath(46,23)do B(1000)end while(q(47,23)).fg~=0 do v(1,0)B(200)end while(q(47,23)).fg==0 do c(2,1,0)B(200)end while(q(47,23)).fg~=0 do v(1,0)B(200)end while e(3)==0 do G(3)B(250)end while(q(47,23)).fg~=0 do v(1,0)B(200)end while(q(47,23)).fg==0 do c(3,1,0)B(750)end while e(10672)==0 do B(500)end while e(10672)~=0 do c(10672,1,0)B(750)end while(q(47,23)).fg==3 do v(1,0)B(200)end while e(48)==0 do G(3)B(250)end while not n(48)do L(48)B(1000)end P(3,k.EXIT)while not d.isInside("EXIT")do B(1000)end local g=0 while not d.warp(r)do B(1000)r=r..g end while e(9640)==0 do B(200)end while e(9640)~=0 do c(9640,0,-1)B(200)end for r=0,2,1 do O(H.random(1))B(1500)end end function u.createMessageID(r,g)W_("webhook:fmessage<url>",r,"string")W_("webhook:fmessage<message>",g,"string")local d=r.."?wait=1"local W=U("[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Write-Host (Invoke-RestMethod -Uri %s -ContentType application/json -Method POST -Body (@{\'content\'=\'%s\'} | ConvertTo-Json -Depth 4));",d,g)local N=io.popen("powershell -Command \""..(W.."\""))if not N then return nil end local E=(N:read("*all")):match("@{id=(%d+);")N:close()return E end r.Auth=g r.WorldHandler=d r.StatusHandler=W r.PacketHandler=D r.InventoryHandler=s r.TileHandler=N r.NumberUtils=E r.DateUtils=X r.TableUtils=x r.StringUtils=H r.BotUtils=K r.PingHandler=F r.CaptchaHandler=y r.WebhookHandler=u r.ItemDatabase=h r.Json=R r.Date=i r.AssertUtils={assertv=d_,tassertv=W_}return r