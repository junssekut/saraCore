local Y={_VERSION="0.1.6";_AUTHOR="junssekut#4964",_CONTRIBUTORS={}}local O={}local W={}local n={}local y={}local p={}local U={}local v={}local M={}local Q={}local s={}local J={}local h={}local g={}local P={VALUE_MISMATCH="[%s] got: %s";TYPE_MISMATCH="[%s] got: %s, expected: %s"}local R={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0";DROP_DIALOG="action|drop\n|itemID|%d";DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit",TUTORIAL_POPUP_CLOSE="ftue_start_popup_close",TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1";INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d";INSERT_VEND_CONFIRM="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nsetprice|0\nchk_peritem|0\nchk_perlock|1",UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local Z={SELECT_ALL="Select All";GUEST_ACCOUNT="Guest Account";EXTERNAL="External",AUTO_ACCESS="Auto Access",AUTO_RECONNECT="Auto Reconnect";AUTO_LEAVE="Auto Leave";IGNORE_GEMS="Ignore Gems"}local T=_G.getBot local N=_G.getTile local S=_G.sendPacket local c=_G.sendPacketRaw local A=_G.sleep local B=_G.connect local r=_G.request local H=_G.setBool local G=_G.removeBot local i=_G.addBot local K=_G.findItem local j=_G.getPing local I=_G.findPath local D=_G.getPlayers local F=_G.enter local f=_G.punch local a=_G.place local o=_G.collect local L=_G.wear local q=_G.findClothes local w=_G.say local x=string.format local t=math.floor local l=math.abs local b=os.date local V=os.time local e=os.difftime local u=y.isWhiteDoor local E=n.isOnline local m=g.isFailed local C=h.isStuck local d=assert((load(r("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local X=assert((load(r("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local z=assert((load(r("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local k local YQ local function OQ(Y,O)if not Y then error(O or"Assertion Failed!")end return Y end local function WQ(Y,O,W)return OQ(type(O)==W,P.TYPE_MISMATCH:format(Y,type(O),W))end function W.exit()S(3,R.EXIT)while not W.isInside("exit")do A(1000)end end function g.getCaptcha()if not T()then return"unknown"end return(T()).captcha or"unknown"end function g.isFailed()return not(g.getCaptcha()):match("Solved")end function g.handleCaptcha()local Y=V()disconnect()A(250)O.reconnect()return z.diff(Y)end function W.warp(Y,p,U,v,M)p=p or""U=U or 15 v=v or 6 M=M or 2500 WQ("worldhandler:warp<world>",Y,"string")WQ("worldhandler:warp<id>",p,"string")WQ("worldhandler:warp<limit_tries>",U,"number")WQ("worldhandler:warp<after_tries>",v,"number")Y=Y:upper()local Q=0 local s=5 while not W.isInside(Y)do if not n.isOnline()then O.reconnect()end if Q~=0 and Q%(v*U)==0 then return false end if Q%v==0 then S(3,R.JOIN_WORLD:format(p==""and Y or Y..("|"..p)))end Q=Q+1 local y=0 while y~=s do y=y+1 A(1000)if W.isInside(Y)then break end end end if Y=="EXIT"or p==""then return W.isInside(Y)end Q=0 while y.isWhiteDoor()do if not n.isOnline()then O.reconnect()end if Q~=0 and Q%(v*U)==0 then return false end if Q%v==0 then S(3,R.JOIN_WORLD:format(Y..("|"..p)))end Q=Q+1 local W=0 while W~=s do W=W+1 A(1000)if not y.isWhiteDoor()then break end end end A((s*.5)*1000)return W.isInside(Y)end function W.getWorld()if not T()then return"unknown"end return(T()).world or"unknown"end function W.isInside(Y)OQ(type(Y)=="string",P.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(Y)))return W.getWorld()==Y end function y.isWhiteDoor()if not T()then return false end local Y=N(t((T()).x*.03125),t((T()).y*.03125))return(Y and Y.fg or nil)==6 end function n.getStatus(Y)if not T(Y or nil)then return"offline"end return(T(Y or nil)).status or"offline"end function n.isOnline(Y,O)return(O or n.getStatus(Y or nil))=="online"end function y.calculateFloating(Y,O)if(N(Y,O)).flags==0 then return Y,O,0,0 end local W=y.getx()for n=-1,1,2 do if Y+n==W then return Y,O,-n,0 end end for W=-1,1,2 do if Y+W>=0 and Y+W<=99 then if(N(Y+W,O)).flags==0 then if not I(Y+W,O)then A(500)else A(150)return Y,O,-W,0 end end end end for W=-1,1,1 do for n=-2,2,2 do if(Y+W>=0 and Y+W<=99)and(O+n>=0 and O+n<=53)then if(N(Y+W,O+n)).flags==0 then if not I(Y+W,O+n)then A(500)else A(150)return Y,O,-W,-n end end end end end return nil end function y.getx()if not T()then return nil end return t(((T()).x or 0)*.03125)end function y.gety()if not T()then return nil end return t(((T()).y or 0)*.03125)end function y.get()if not T()then return nil end return y.getx(),y.gety()end function y.full(Y,O)WQ("tilehandler:full<x>",Y,"number")WQ("tilehandler:full<y>",O,"number")local W=v.contains local n=table.insert local y,p,U=0,{},getObjects()for U,v in pairs(U)do if(v.x>=Y*32-6 and v.x<=(Y+1)*32-6)and(v.y>=O*32-2 and v.y<=(O+1)*32-2)then y=y+v.count if not W(p,v.id)then n(p,v.id)end end end return y>=3800 or#p>=20 end function h.isStuck()return(E and E()or n.isOnline())and j()==500 end function h.handleStuck()local Y=0 local O=1 local W=15 while h.isStuck()do if Y%O==0 then B()end Y=Y+1 local n=0 while n~=W do n=n+1 A(1000)if n~=0 and n%5~=0 then if not h.isStuck()then break end end end end end function O.c(Y,n,y,p,U)U=U~=nil and U or false if not k or k and e(V(),k)>=10 then if m()then g.handleCaptcha()end k=V()if not YQ or YQ and e(V(),YQ)>=15 then if C()then h.handleStuck()end YQ=k end end if not E()then O.reconnect()if(W.getWorld()):match("_")then J.skipTutorial()end if Y then WQ("auth:c<world>",Y,"string")Y=Y:upper()if not W.isInside(Y)then W.warp(Y,n or"")end if y and p then J.sfindPath(y,p)end end end if U and(y and p)then if t((T()).x*.03125)~=y or t((T()).y*.03125)~=p then if u()and(Y and n)then W.warp(Y,n)end I(y,p)end end end function O.reconnect(Y,O,W)Y=Y or 8 O=O or 5 W=W~=nil and W or false local y=0 local p=W and 1 or 6 local U=W and 7 or 5 A(math.random(0,U)*1000)while not n.isOnline()do local W=n.getStatus()if W=="suspended"then return W end if W=="banned"then return W end if W=="maintenance"then return W end if W=="version update"then return W end if W=="temporary ban"then return W end if W=="onsendtoserver"then return W end if W=="aap detected"then return W end if W=="invalid email"then return W end if W=="guest error"then return W end if n.isOnline()then break end if y~=0 and y%(p*Y)==0 then local Y=0 local W=O*60 while Y~=W do Y=Y+1 A(1000)if n.isOnline()then break end end if n.isOnline()then break end end if y%p==0 then B()end y=y+1 local v=0 while v~=U do v=v+1 A(1000)if n.isOnline()then break end end end return n.getStatus()end function O.login(Y,W,n,y)W=W~=nil and W or false n=n or 10000 y=y~=nil and y or false WQ("auth:login<credential>",Y,"table")WQ("auth:login<remove>",W,"boolean")WQ("auth:login<delay>",n,"number")WQ("auth:login<force>",y,"boolean")local p,U local v=0 local M=2 local Q=10 local s=1 if W and T()then p=(T()).name while T(p)do if v>Q then break end if v%M==0 then G(p)end v=v+1 A(s*1000)end end v=0 p=Y.name U=Y.password if p==""and U==""then p=T()and(T()).name end if not T(p)then if U==""then H(Z.GUEST_ACCOUNT,true)end if Y.proxy then i(p,U,Y.proxy)else i(p,U)end H(Z.GUEST_ACCOUNT,false)else B()end H(Z.AUTO_RECONNECT,false)H(Z.AUTO_LEAVE,false)if not y then local Y=O.reconnect(8,5,true)A(n)return Y end A(n)end function p.format(Y)WQ("numberutils:format<number>",Y,"number")if Y>=1000000 then return x("%.2fm",Y*1e-006)elseif Y>=1000 then return x("%.2fk",Y*.001)end return tostring(Y)end function p.nformat(Y)WQ("numberutils:nformat<number>",Y,"number")local O,W=x("%0.f",Y)while W~=0 do O,W=O:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return O end function U.nowIso()local Y=b("!*t",V())local O=x("%d-%02d-%02dT%02d:%02d:%02dZ",Y.year,Y.month,Y.day,Y.hour,Y.min,Y.sec)return O end function v.contains(Y,O)WQ("tableutils:contains",Y,"table")if type(O)=="string"then O=O:upper()end for W=1,#Y,1 do local n=Y[W]if type(n)=="string"then n=n:upper()end if n==O then return true end end return false end function Q.collect(Y,O,W)if l((T()).x-O)>96 or l((T()).y-W)>96 then return false end c({type=11;int_data=Y;pos_x=O;pos_y=W})return true end function Q.tvend(Y,O)S(2,R.TAKE_VEND:format(Y,O))A(1500)end function Q.vend(Y,O,W)if(N(O,W)).data~=Y then S(2,R.INSERT_VEND:format(O,W,Y))A(1000)S(2,R.INSERT_VEND_CONFIRM:format(O,W))else S(2,R.UPDATE_VEND:format(O,W))end A(1500)end function s.drop(Y,O)WQ("inventoryhandler:drop<item_id>",Y,"number")O=O or K(Y)if O==0 then return end WQ("inventoryhandler:drop<item_count>",O,"number")c({type=0,flags=48;pos_x=(T()).x;pos_y=(T()).y})S(2,R.DROP_DIALOG:format(Y))A(250)S(2,R.DROP_OK:format(Y,O))A(1250)end function M.random(Y,O,W,n,y)Y=Y or 1 O=O or 1 W=W~=nil and W or false n=n~=nil and n or false y=y~=nil and y or false if not M.charset then local Y=table.insert local O={}if W then for W=48,57,1 do Y(O,string.char(W))end end for W=65,90,1 do Y(O,string.char(W))end for W=97,122,1 do Y(O,string.char(W))end M.charset=O end local p=""for Y=1,Y,1 do math.randomseed(((V()*O)*Y)*(j()or 1))p=p..M.charset[math.random(1,#M.charset)]end if n then return p:upper()end if y then return p:lower()end return p end function M.randomi(Y,O)Y=Y or 1 O=O or 1 if not M.charseti then local Y=table.insert local O={}for W=48,57,1 do Y(O,string.char(W))end M.charseti=O end local W=""for Y=1,Y,1 do math.randomseed(((V()*O)*Y)*(j()or 1))W=W..M.charseti[math.random(#M.charseti)]end return W end function J.sfindPath(Y,O)WQ("botutils:sfindpath<x>",Y,"number")WQ("botutils:sfindpath<x>",O,"number")local W=0 local n=10 local y=I(Y,O)while not y do if W>n then break end y=I(Y,O)if y then break end A(100)W=W+1 end return y end function J.getGuest()if not T()then return nil end local Y=D()for O=0,#Y,1 do local W=Y[O]if W.name:match("_")then if(W.name:match("(.+)_%d+")):upper()==(T()).name:upper()then return W.name end end end return nil end function J.skipTutorial()local Y=J.getGuest()if not Y then Y=M.random(13)end if Y:match("_")then Y=Y:gsub("_","")end if not(W.getWorld()):match(".+_1_.+")then return nil end S(2,R.TUTORIAL_POPUP_CLOSE)A(200)while not J.sfindPath(86,30)do A(1000)end F()while not(W.getWorld()):match(".+_2_.+")do A(1000)end while not J.sfindPath(46,23)do A(1000)end while(N(47,23)).fg~=0 do f(1,0)A(200)end while(N(47,23)).fg==0 do a(2,1,0)A(200)end while(N(47,23)).fg~=0 do f(1,0)A(200)end while K(3)==0 do o(3)A(250)end while(N(47,23)).fg~=0 do f(1,0)A(200)end while(N(47,23)).fg==0 do a(3,1,0)A(750)end while K(10672)==0 do A(500)end while K(10672)~=0 do a(10672,1,0)A(750)end while(N(47,23)).fg==3 do f(1,0)A(200)end while K(48)==0 do o(3)A(250)end while not q(48)do L(48)A(1000)end S(3,R.EXIT)while not W.isInside("EXIT")do A(1000)end local O=0 while not W.warp(Y)do A(1000)Y=Y..O end while K(9640)==0 do A(200)end while K(9640)~=0 do a(9640,0,-1)A(200)end for Y=0,2,1 do w(M.random(1))A(1500)end end Y.Auth=O Y.WorldHandler=W Y.StatusHandler=n Y.PacketHandler=Q Y.InventoryHandler=s Y.TileHandler=y Y.NumberUtils=p Y.DateUtils=U Y.TableUtils=v Y.StringUtils=M Y.BotUtils=J Y.PingHandler=h Y.CaptchaHandler=g Y.ItemDatabase=d Y.Json=X Y.Date=z Y.AssertUtils={assertv=OQ,tassertv=WQ}return Y