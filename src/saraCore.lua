local a={_VERSION="0.1.6";_AUTHOR="junssekut#4964";_CONTRIBUTORS={}}local t={}local P={}local m={}local D={}local s={}local B={}local h={}local X={}local H={}local i={}local f={}local g={}local G={}local v={}local u={VALUE_MISMATCH="[%s] got: %s";TYPE_MISMATCH="[%s] got: %s, expected: %s"}local A={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0",DROP_DIALOG="action|drop\n|itemID|%d";DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d",EXIT="action|quit_to_exit";TUTORIAL_POPUP_CLOSE="ftue_start_popup_close",TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1";INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d",UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local z={SELECT_ALL="Select All",GUEST_ACCOUNT="Guest Account",EXTERNAL="External";AUTO_ACCESS="Auto Access",AUTO_RECONNECT="Auto Reconnect";AUTO_LEAVE="Auto Leave",IGNORE_GEMS="Ignore Gems"}local k=_G.getBot local F=_G.getTile local x=_G.sendPacket local S=_G.sendPacketRaw local O=_G.sleep local M=_G.connect local N=_G.request local T=_G.setBool local Z=_G.removeBot local p=_G.addBot local V=_G.findItem local c=_G.getPing local I=_G.findPath local K=_G.getPlayers local W=_G.enter local w=_G.punch local Y=_G.place local E=_G.collect local d=_G.wear local n=_G.findClothes local J=_G.say local L=string.format local R=math.floor local l=math.abs local Q=os.date local y=os.time local q=os.difftime local o=D.isWhiteDoor local C=m.isOnline local b=G.isFailed local U=g.isStuck local j=assert((load(N("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local r=assert((load(N("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local e=assert((load(N("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local af local tf local function Pf(a,t)if not a then error(t or"Assertion Failed!")end return a end local function mf(a,t,P)return Pf(type(t)==P,u.TYPE_MISMATCH:format(a,type(t),P))end function P.exit()x(3,A.EXIT)while not P.isInside("exit")do O(1000)end end function G.getCaptcha()if not k()then return"unknown"end return(k()).captcha or"unknown"end function G.isFailed()return not(G.getCaptcha()):match("Solved")end function G.handleCaptcha()local a=y()disconnect()O(250)t.reconnect()return e.diff(a)end function P.warp(a,s,B,h,X)s=s or""B=B or 15 h=h or 6 X=X or 5000 mf("worldhandler:warp<world>",a,"string")mf("worldhandler:warp<id>",s,"string")mf("worldhandler:warp<limit_tries>",B,"number")mf("worldhandler:warp<after_tries>",h,"number")a=a:upper()local H=0 local i=5 while not P.isInside(a)do if not m.isOnline()then t.reconnect()end if H~=0 and H%(h*B)==0 then return false end if H%h==0 then x(3,A.JOIN_WORLD:format(s==""and a or a..("|"..s)))end H=H+1 local D=0 while D~=i do D=D+1 O(1000)if P.isInside(a)then break end end end if a=="EXIT"or s==""then return P.isInside(a)end H=0 while D.isWhiteDoor()do if not m.isOnline()then t.reconnect()end if H~=0 and H%(h*B)==0 then return false end if H%h==0 then x(3,A.JOIN_WORLD:format(a..("|"..s)))end H=H+1 local P=0 while P~=i do P=P+1 O(1000)if not D.isWhiteDoor()then break end end end O(i)return P.isInside(a)end function P.getWorld()if not k()then return"unknown"end return(k()).world or"unknown"end function P.isInside(a)Pf(type(a)=="string",u.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(a)))return P.getWorld()==a end function D.isWhiteDoor()if not k()then return false end local a=F(R((k()).x*.03125),R((k()).y*.03125))return(a and a.fg or nil)==6 end function D.getWhiteDoor()for a=0,99,1 do if(F(a,23)).fg==6 then return{x=a;y=23}end end return nil end function m.getStatus(a)if not k(a or nil)then return"offline"end return(k(a or nil)).status or"offline"end function m.isOnline(a,t)return(t or m.getStatus(a or nil))=="online"end function D.calculateFloating(a,t)if(F(a,t)).flags==0 then return a,t,0,0 end local P=D.getx()for m=-1,1,2 do if a+m==P then return a,t,-m,0 end end for P=-1,1,2 do if a+P>=0 and a+P<=99 then if(F(a+P,t)).flags==0 then if not I(a+P,t)then O(500)else O(150)return a,t,-P,0 end end end end for P=-1,1,1 do for m=-2,2,2 do if(a+P>=0 and a+P<=99)and(t+m>=0 and t+m<=53)then if(F(a+P,t+m)).flags==0 then if not I(a+P,t+m)then O(500)else O(150)return a,t,-P,-m end end end end end return nil end function D.getx()if not k()then return nil end return R(((k()).x or 0)*.03125)end function D.gety()if not k()then return nil end return R(((k()).y or 0)*.03125)end function D.get()if not k()then return nil end return D.getx(),D.gety()end function D.full(a,t)mf("tilehandler:full<x>",a,"number")mf("tilehandler:full<y>",t,"number")local P=h.contains local m=table.insert local D,s,B=0,{},getObjects()for B,h in pairs(B)do if(h.x>=a*32-6 and h.x<=(a+1)*32-6)and(h.y>=t*32-2 and h.y<=(t+1)*32-2)then D=D+h.count if not P(s,h.id)then m(s,h.id)end end end return D>=3800 or#s>=20 end function g.isStuck()if not C then C=m.isOnline end return(C and C()or m.isOnline())and c()==500 end function g.handleStuck()local a=0 local t=1 local P=15 while g.isStuck()do if a%t==0 then M()end a=a+1 local m=0 while m~=P do m=m+1 O(1000)if m~=0 and m%5~=0 then if not g.isStuck()then break end end end end end function t.c(a,s,B,h,X)X=X~=nil and X or false if not af or af and q(y(),af)>=10 then if not b then b=G.isFailed end if b()then G.handleCaptcha()end af=y()if not tf or tf and q(y(),tf)>=15 then if not U then U=g.isStuck end if U()then g.handleStuck()end tf=af end end if not C then C=m.isOnline end if not C()then t.reconnect()if(P.getWorld()):match("_")then f.skipTutorial()end if a then mf("auth:c<world>",a,"string")a=a:upper()if not P.isInside(a)then P.warp(a,s or"")end if B and h then f.sfindPath(B,h)end end end if X and(B and h)then if R((k()).x*.03125)~=B or R((k()).y*.03125)~=h then if not o then o=D.isWhiteDoor end if o()and(a and s)then P.warp(a,s)end I(B,h)end end end function t.reconnect(a,t,P)a=a or 8 t=t or 5 P=P~=nil and P or false local D=0 local s=P and 1 or 6 local B=P and 7 or 5 O(math.random(0,B)*1000)while not m.isOnline()do local P=m.getStatus()if P=="suspended"then return P end if P=="banned"then return P end if P=="maintenance"then return P end if P=="version update"then return P end if P=="temporary ban"then return P end if P=="onsendtoserver"then return P end if P=="aap detected"then return P end if P=="invalid email"then return P end if P=="guest error"then return P end if m.isOnline()then break end if D~=0 and D%(s*a)==0 then local a=0 local P=t*60 while a~=P do a=a+1 O(1000)if m.isOnline()then break end end if m.isOnline()then break end end if D%s==0 then M()end D=D+1 local h=0 while h~=B do h=h+1 O(1000)if m.isOnline()then break end end end return m.getStatus()end function t.login(a,P,m,D)P=P~=nil and P or false m=m or 10000 D=D~=nil and D or false mf("auth:login<credential>",a,"table")mf("auth:login<remove>",P,"boolean")mf("auth:login<delay>",m,"number")mf("auth:login<force>",D,"boolean")local s,B local h=0 local X=2 local H=10 local i=1 if P and k()then s=(k()).name while k(s)do if h>H then break end if h%X==0 then Z(s)end h=h+1 O(i*1000)end end h=0 s=a.name B=a.password if s==""and B==""then s=k()and(k()).name end if not k(s)then if B==""then T(z.GUEST_ACCOUNT,true)end if a.proxy then p(s,B,a.proxy)else p(s,B)end T(z.GUEST_ACCOUNT,false)else M()end T(z.AUTO_RECONNECT,false)T(z.AUTO_LEAVE,false)if not D then local a=t.reconnect(8,5,true)O(m)return a end O(m)end function s.format(a)mf("numberutils:format<number>",a,"number")if a>=1000000 then return L("%.2fm",a*1e-006)elseif a>=1000 then return L("%.2fk",a*.001)end return tostring(a)end function s.nformat(a)mf("numberutils:nformat<number>",a,"number")local t,P=L("%0.f",a)while P~=0 do t,P=t:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return t end function B.nowIso()local a=Q("!*t",y())local t=L("%d-%02d-%02dT%02d:%02d:%02dZ",a.year,a.month,a.day,a.hour,a.min,a.sec)return t end function h.contains(a,t)mf("tableutils:contains",a,"table")if type(t)=="string"then t=t:upper()end for P=1,#a,1 do local m=a[P]if type(m)=="string"then m=m:upper()end if m==t then return true end end return false end function H.collect(a,t,P)if l((k()).x-t)>96 or l((k()).y-P)>96 then return false end S({type=11;int_data=a;pos_x=t,pos_y=P})return true end function H.tvend(a,t)wrench(0,0)O(200)x(2,A.TAKE_VEND:format(a,t))O(1500)end function H.vend(a,t,P)wrench(0,0)O(200)if(F(t,P)).data==0 then x(2,A.INSERT_VEND:format(t,P,a))else x(2,A.UPDATE_VEND:format(t,P))end O(1500)end function i.drop(a,t)mf("inventoryhandler:drop<item_id>",a,"number")t=t or V(a)if t==0 then return end mf("inventoryhandler:drop<item_count>",t,"number")S({type=0,flags=48,pos_x=(k()).x;pos_y=(k()).y})x(2,A.DROP_DIALOG:format(a))O(250)x(2,A.DROP_OK:format(a,t))O(1250)end function X.random(a,t,P,m,D)a=a or 1 t=t or 1 P=P~=nil and P or false m=m~=nil and m or false D=D~=nil and D or false if not X.charset then local a=table.insert local t={}if P then for P=48,57,1 do a(t,string.char(P))end end for P=65,90,1 do a(t,string.char(P))end for P=97,122,1 do a(t,string.char(P))end X.charset=t end local s=""for a=1,a,1 do math.randomseed(((y()*t)*a)*(c()or 1))s=s..X.charset[math.random(1,#X.charset)]end if m then return s:upper()end if D then return s:lower()end return s end function X.randomi(a,t)a=a or 1 t=t or 1 if not X.charseti then local a=table.insert local t={}for P=48,57,1 do a(t,string.char(P))end X.charseti=t end local P=""for a=1,a,1 do math.randomseed(((y()*t)*a)*(c()or 1))P=P..X.charseti[math.random(#X.charseti)]end return P end function f.sfindPath(a,t)mf("botutils:sfindpath<x>",a,"number")mf("botutils:sfindpath<x>",t,"number")local P=0 local m=10 local D=I(a,t)while not D do if P>m then break end D=I(a,t)if D then break end O(100)P=P+1 end return D end function f.getGuest()if not k()then return nil end local a=K()for t=0,#a,1 do local P=a[t]if P.name:match("_")then if(P.name:match("(.+)_%d+")):upper()==(k()).name:upper()then return P.name end end end return nil end function f.skipTutorial()local a=f.getGuest()if not a then a=X.random(13)end if a:match("_")then a=a:gsub("_","")end if not(P.getWorld()):match(".+_1_.+")then return nil end x(2,A.TUTORIAL_POPUP_CLOSE)O(200)while not f.sfindPath(86,30)do O(1000)end W()while not(P.getWorld()):match(".+_2_.+")do O(1000)end while not f.sfindPath(46,23)do O(1000)end while(F(47,23)).fg~=0 do w(1,0)O(200)end while(F(47,23)).fg==0 do Y(2,1,0)O(200)end while(F(47,23)).fg~=0 do w(1,0)O(200)end while V(3)==0 do E(3)O(250)end while(F(47,23)).fg~=0 do w(1,0)O(200)end while(F(47,23)).fg==0 do Y(3,1,0)O(750)end while V(10672)==0 do O(500)end while V(10672)~=0 do Y(10672,1,0)O(750)end while(F(47,23)).fg==3 do w(1,0)O(200)end while V(48)==0 do E(3)O(250)end while not n(48)do d(48)O(1000)end x(3,A.EXIT)while not P.isInside("EXIT")do O(1000)end local t=0 while not P.warp(a)do O(1000)a=a..t end while V(9640)==0 do O(200)end while V(9640)~=0 do Y(9640,0,-1)O(200)end for a=0,2,1 do J(X.random(1))O(1500)end end function v.createMessageID(a,t)mf("webhook:fmessage<url>",a,"string")mf("webhook:fmessage<message>",t,"string")local P=a.."?wait=1"local m=L("[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Write-Host (Invoke-RestMethod -Uri %s -ContentType application/json -Method POST -Body (@{\'content\'=\'%s\'} | ConvertTo-Json -Depth 4));",P,t)local D=io.popen("powershell -Command \""..(m.."\""))if not D then return nil end local s=(D:read("*all")):match("@{id=(%d+);")D:close()return s end function v.getDefaultFooter()return{text="Developed by machseeman and made with <3\nLast Updated",icon_url="https://raw.githubusercontent.com/junssekut/saraFarm/main/images/img_logo-machseeman-eye.jpg"}end a.Auth=t a.WorldHandler=P a.StatusHandler=m a.PacketHandler=H a.InventoryHandler=i a.TileHandler=D a.NumberUtils=s a.DateUtils=B a.TableUtils=h a.StringUtils=X a.BotUtils=f a.PingHandler=g a.CaptchaHandler=G a.WebhookHandler=v a.ItemDatabase=j a.Json=r a.Date=e a.ItemSprites={[242]="<:worldlock:1062300767773540392>",[1796]="<:diamondlock:1062300596616577034>",[2978]="<:vendingmachine:1083098588516712508>",[4584]="<:pepper:982947453089247264>";[4585]="<:pepper_tree_seed:1012630107715797073>",[5666]="<:laser_grid:1017034752060030976>";[5667]="<:laser_grid_seed:1017035839223640165>";GLOBE="<:globe:1062300599107993600>",BOARD="<:board1:1061608767130714222>";BOX="<:box:1061608771513761923>";GROWTOPIA_NO="<:no:1079010327640948736>";GROWTOPIA_YES="<:ceklis:1083906883888353350>";NO="<:offline:998723190773788742>",YES="<:online:998723195194585129>",NOR="<:nor:998723131919306803>"}a.AssertUtils={assertv=Pf,tassertv=mf}return a