local R={_VERSION="0.1.6";_AUTHOR="junssekut#4964";_CONTRIBUTORS={}}local J={}local G={}local m={}local s={}local b={}local h={}local q={}local U={}local z={}local d={}local M={}local Y={}local a={}local Q={}local p={VALUE_MISMATCH="[%s] got: %s",TYPE_MISMATCH="[%s] got: %s, expected: %s"}local c={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0";DROP_DIALOG="action|drop\n|itemID|%d",DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit";TUTORIAL_POPUP_CLOSE="ftue_start_popup_close";TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1",INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d";UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local I={SELECT_ALL="Select All";GUEST_ACCOUNT="Guest Account";EXTERNAL="External",AUTO_ACCESS="Auto Access";AUTO_RECONNECT="Auto Reconnect";AUTO_LEAVE="Auto Leave";IGNORE_GEMS="Ignore Gems"}local Z=_G.getBot local r=_G.getTile local B=_G.sendPacket local u=_G.sendPacketRaw local j=_G.sleep local g=_G.connect local H=_G.request local O=_G.setBool local N=_G.removeBot local e=_G.addBot local o=_G.findItem local P=_G.getPing local V=_G.findPath local L=_G.getPlayers local f=_G.enter local K=_G.punch local l=_G.place local k=_G.collect local X=_G.wear local x=_G.findClothes local w=_G.say local y=string.format local S=math.floor local T=math.abs local F=os.date local W=os.time local i=os.difftime local n=s.isWhiteDoor local E=m.isOnline local v=a.isFailed local A=Y.isStuck local D=assert((load(H("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local t=assert((load(H("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local C=assert((load(H("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local RU local JU local function GU(R,J)if not R then error(J or"Assertion Failed!")end return R end local function mU(R,J,G)return GU(type(J)==G,p.TYPE_MISMATCH:format(R,type(J),G))end function G.exit()B(3,c.EXIT)while not G.isInside("exit")do j(1000)end end function a.getCaptcha()if not Z()then return"unknown"end return(Z()).captcha or"unknown"end function a.isFailed()return not(a.getCaptcha()):match("Solved")end function a.handleCaptcha()local R=W()disconnect()j(250)J.reconnect()return C.diff(R)end function G.warp(R,b,h,q,U)b=b or""h=h or 15 q=q or 6 U=U or 5000 mU("worldhandler:warp<world>",R,"string")mU("worldhandler:warp<id>",b,"string")mU("worldhandler:warp<limit_tries>",h,"number")mU("worldhandler:warp<after_tries>",q,"number")R=R:upper()local z=0 local d=5 while not G.isInside(R)do if not m.isOnline()then J.reconnect()end if z~=0 and z%(q*h)==0 then return false end if z%q==0 then B(3,c.JOIN_WORLD:format(b==""and R or R..("|"..b)))end z=z+1 local s=0 while s~=d do s=s+1 j(1000)if G.isInside(R)then break end end end if R=="EXIT"or b==""then return G.isInside(R)end z=0 while s.isWhiteDoor()do if not m.isOnline()then J.reconnect()end if z~=0 and z%(q*h)==0 then return false end if z%q==0 then B(3,c.JOIN_WORLD:format(R..("|"..b)))end z=z+1 local G=0 while G~=d do G=G+1 j(1000)if not s.isWhiteDoor()then break end end end j(d)return G.isInside(R)end function G.getWorld()if not Z()then return"unknown"end return(Z()).world or"unknown"end function G.isInside(R)GU(type(R)=="string",p.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(R)))return G.getWorld()==R end function s.isWhiteDoor()if not Z()then return false end local R=r(S((Z()).x*.03125),S((Z()).y*.03125))return(R and R.fg or nil)==6 end function s.getWhiteDoor()for R=0,99,1 do if(r(R,23)).fg==6 then return{x=R,y=23}end end return nil end function m.getStatus(R)if not Z(R or nil)then return"offline"end return(Z(R or nil)).status or"offline"end function m.isOnline(R,J)return(J or m.getStatus(R or nil))=="online"end function s.calculateFloating(R,J)if(r(R,J)).flags==0 then return R,J,0,0 end local G=s.getx()for m=-1,1,2 do if R+m==G then return R,J,-m,0 end end for G=-1,1,2 do if R+G>=0 and R+G<=99 then if(r(R+G,J)).flags==0 then if not V(R+G,J)then j(500)else j(150)return R,J,-G,0 end end end end for G=-1,1,1 do for m=-2,2,2 do if(R+G>=0 and R+G<=99)and(J+m>=0 and J+m<=53)then if(r(R+G,J+m)).flags==0 then if not V(R+G,J+m)then j(500)else j(150)return R,J,-G,-m end end end end end return nil end function s.getx()if not Z()then return nil end return S(((Z()).x or 0)*.03125)end function s.gety()if not Z()then return nil end return S(((Z()).y or 0)*.03125)end function s.get()if not Z()then return nil end return s.getx(),s.gety()end function s.full(R,J)mU("tilehandler:full<x>",R,"number")mU("tilehandler:full<y>",J,"number")local G=q.contains local m=table.insert local s,b,h=0,{},getObjects()for h,q in pairs(h)do if(q.x>=R*32-6 and q.x<=(R+1)*32-6)and(q.y>=J*32-2 and q.y<=(J+1)*32-2)then s=s+q.count if not G(b,q.id)then m(b,q.id)end end end return s>=3800 or#b>=20 end function Y.isStuck()if not E then E=m.isOnline end return(E and E()or m.isOnline())and P()==500 end function Y.handleStuck()local R=0 local J=1 local G=15 while Y.isStuck()do if R%J==0 then g()end R=R+1 local m=0 while m~=G do m=m+1 j(1000)if m~=0 and m%5~=0 then if not Y.isStuck()then break end end end end end function J.c(R,b,h,q,U)U=U~=nil and U or false if not RU or RU and i(W(),RU)>=10 then if not v then v=a.isFailed end if v()then a.handleCaptcha()end RU=W()if not JU or JU and i(W(),JU)>=15 then if not A then A=Y.isStuck end if A()then Y.handleStuck()end JU=RU end end if not E then E=m.isOnline end if not E()then J.reconnect()if(G.getWorld()):match("_")then M.skipTutorial()end if R then mU("auth:c<world>",R,"string")R=R:upper()if not G.isInside(R)then G.warp(R,b or"")end if h and q then M.sfindPath(h,q)end end end if U and(h and q)then if S((Z()).x*.03125)~=h or S((Z()).y*.03125)~=q then if not n then n=s.isWhiteDoor end if n()and(R and b)then G.warp(R,b)end V(h,q)end end end function J.reconnect(R,J,G)R=R or 8 J=J or 5 G=G~=nil and G or false local s=0 local b=G and 1 or 6 local h=G and 7 or 5 j(math.random(0,h)*1000)while not m.isOnline()do local G=m.getStatus()if G=="suspended"then return G end if G=="banned"then return G end if G=="maintenance"then return G end if G=="version update"then return G end if G=="temporary ban"then return G end if G=="onsendtoserver"then return G end if G=="aap detected"then return G end if G=="invalid email"then return G end if G=="guest error"then return G end if m.isOnline()then break end if s~=0 and s%(b*R)==0 then local R=0 local G=J*60 while R~=G do R=R+1 j(1000)if m.isOnline()then break end end if m.isOnline()then break end end if s%b==0 then g()end s=s+1 local q=0 while q~=h do q=q+1 j(1000)if m.isOnline()then break end end end return m.getStatus()end function J.login(R,G,m,s)G=G~=nil and G or false m=m or 10000 s=s~=nil and s or false mU("auth:login<credential>",R,"table")mU("auth:login<remove>",G,"boolean")mU("auth:login<delay>",m,"number")mU("auth:login<force>",s,"boolean")local b,h local q=0 local U=2 local z=10 local d=1 if G and Z()then b=(Z()).name while Z(b)do if q>z then break end if q%U==0 then N(b)end q=q+1 j(d*1000)end end q=0 b=R.name h=R.password if b==""and h==""then b=Z()and(Z()).name end if not Z(b)then if h==""then O(I.GUEST_ACCOUNT,true)end if R.proxy then e(b,h,R.proxy)else e(b,h)end O(I.GUEST_ACCOUNT,false)else g()end O(I.AUTO_RECONNECT,false)O(I.AUTO_LEAVE,false)if not s then local R=J.reconnect(8,5,true)j(m)return R end j(m)end function b.format(R)mU("numberutils:format<number>",R,"number")if R>=1000000 then return y("%.2fm",R*1e-006)elseif R>=1000 then return y("%.2fk",R*.001)end return tostring(R)end function b.nformat(R)mU("numberutils:nformat<number>",R,"number")local J,G=y("%0.f",R)while G~=0 do J,G=J:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return J end function h.nowIso()local R=F("!*t",W())local J=y("%d-%02d-%02dT%02d:%02d:%02dZ",R.year,R.month,R.day,R.hour,R.min,R.sec)return J end function q.contains(R,J)mU("tableutils:contains",R,"table")if type(J)=="string"then J=J:upper()end for G=1,#R,1 do local m=R[G]if type(m)=="string"then m=m:upper()end if m==J then return true end end return false end function z.collect(R,J,G)if T((Z()).x-J)>96 or T((Z()).y-G)>96 then return false end u({type=11;int_data=R;pos_x=J;pos_y=G})return true end function z.tvend(R,J)wrench(0,0)j(200)B(2,c.TAKE_VEND:format(R,J))j(1500)end function z.vend(R,J,G)wrench(0,0)j(200)if(r(J,G)).data==0 then B(2,c.INSERT_VEND:format(J,G,R))else B(2,c.UPDATE_VEND:format(J,G))end j(1500)end function d.drop(R,J)mU("inventoryhandler:drop<item_id>",R,"number")J=J or o(R)if J==0 then return end mU("inventoryhandler:drop<item_count>",J,"number")u({type=0,flags=48,pos_x=(Z()).x;pos_y=(Z()).y})B(2,c.DROP_DIALOG:format(R))j(250)B(2,c.DROP_OK:format(R,J))j(1250)end function U.random(R,J,G,m,s)R=R or 1 J=J or 1 G=G~=nil and G or false m=m~=nil and m or false s=s~=nil and s or false if not U.charset then local R=table.insert local J={}if G then for G=48,57,1 do R(J,string.char(G))end end for G=65,90,1 do R(J,string.char(G))end for G=97,122,1 do R(J,string.char(G))end U.charset=J end local b=""for R=1,R,1 do math.randomseed(((W()*J)*R)*(P()or 1))b=b..U.charset[math.random(1,#U.charset)]end if m then return b:upper()end if s then return b:lower()end return b end function U.randomi(R,J)R=R or 1 J=J or 1 if not U.charseti then local R=table.insert local J={}for G=48,57,1 do R(J,string.char(G))end U.charseti=J end local G=""for R=1,R,1 do math.randomseed(((W()*J)*R)*(P()or 1))G=G..U.charseti[math.random(#U.charseti)]end return G end function M.sfindPath(R,J)mU("botutils:sfindpath<x>",R,"number")mU("botutils:sfindpath<x>",J,"number")local G=0 local m=10 local s=V(R,J)while not s do if G>m then break end s=V(R,J)if s then break end j(100)G=G+1 end return s end function M.getGuest()if not Z()then return nil end local R=L()for J=0,#R,1 do local G=R[J]if G.name:match("_")then if(G.name:match("(.+)_%d+")):upper()==(Z()).name:upper()then return G.name end end end return nil end function M.skipTutorial()local R=M.getGuest()if not R then R=U.random(13)end if R:match("_")then R=R:gsub("_","")end if not(G.getWorld()):match(".+_1_.+")then return nil end B(2,c.TUTORIAL_POPUP_CLOSE)j(200)while not M.sfindPath(86,30)do j(1000)end f()while not(G.getWorld()):match(".+_2_.+")do j(1000)end while not M.sfindPath(46,23)do j(1000)end while(r(47,23)).fg~=0 do K(1,0)j(200)end while(r(47,23)).fg==0 do l(2,1,0)j(200)end while(r(47,23)).fg~=0 do K(1,0)j(200)end while o(3)==0 do k(3)j(250)end while(r(47,23)).fg~=0 do K(1,0)j(200)end while(r(47,23)).fg==0 do l(3,1,0)j(750)end while o(10672)==0 do j(500)end while o(10672)~=0 do l(10672,1,0)j(750)end while(r(47,23)).fg==3 do K(1,0)j(200)end while o(48)==0 do k(3)j(250)end while not x(48)do X(48)j(1000)end B(3,c.EXIT)while not G.isInside("EXIT")do j(1000)end local J=0 while not G.warp(R)do j(1000)R=R..J end while o(9640)==0 do j(200)end while o(9640)~=0 do l(9640,0,-1)j(200)end for R=0,2,1 do w(U.random(1))j(1500)end end function Q.createMessageID(R,J)mU("webhook:fmessage<url>",R,"string")mU("webhook:fmessage<message>",J,"string")local G=R.."?wait=1"local m=y("[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Write-Host (Invoke-RestMethod -Uri %s -ContentType application/json -Method POST -Body (@{\'content\'=\'%s\'} | ConvertTo-Json -Depth 4));",G,J)local s=io.popen("powershell -Command \""..(m.."\""))if not s then return nil end local b=(s:read("*all")):match("@{id=(%d+);")s:close()return b end function Q.getDefaultFooter()return{text="Developed by machseeman and made with <3\nLast Updated";icon_url="https://raw.githubusercontent.com/junssekut/saraFarm/main/images/img_logo-machseeman-eye.jpg"}end R.Auth=J R.WorldHandler=G R.StatusHandler=m R.PacketHandler=z R.InventoryHandler=d R.TileHandler=s R.NumberUtils=b R.DateUtils=h R.TableUtils=q R.StringUtils=U R.BotUtils=M R.PingHandler=Y R.CaptchaHandler=a R.WebhookHandler=Q R.ItemDatabase=D R.Json=t R.Date=C R.ItemSprites={[242]="<:worldlock:1062300767773540392>",[1796]="<:diamondlock:1062300596616577034>",[2978]="<:vendingmachine:1083098588516712508>";[4584]="<:pepper:982947453089247264>";[4585]="<:pepper_tree_seed:1012630107715797073>",[5666]="<:laser_grid:1017034752060030976>",[5667]="<:laser_grid_seed:1017035839223640165>";GLOBE="<:globe:1062300599107993600>",BOARD="<:board1:1061608767130714222>";BOX="<:box:1061608771513761923>";GROWTOPIA_NO="<:no:1079010327640948736>",GROWTOPIA_YES="<:ceklis:1083906883888353350>",NO="<:offline:998723190773788742>",YES="<:online:998723195194585129>",NOR="<:nor:998723131919306803>",FIRE_WAND="<:FireWands:976056227199086612>"}R.AssertUtils={assertv=GU;tassertv=mU}return R