local s={_VERSION="0.1.5";_AUTHOR="junssekut#4964";_CONTRIBUTORS={}}local n={}local b={}local F={}local r={}local L={}local x={}local v={}local J={}local o={}local A={}local P={}local U={}local a={}local D={VALUE_MISMATCH="[%s] got: %s";TYPE_MISMATCH="[%s] got: %s, expected: %s"}local q={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0";DROP_DIALOG="action|drop\n|itemID|%d";DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit";TUTORIAL_POPUP_CLOSE="ftue_start_popup_close"}local d={SELECT_ALL="Select All",GUEST_ACCOUNT="Guest Account",EXTERNAL="External",AUTO_ACCESS="Auto Access",AUTO_RECONNECT="Auto Reconnect";AUTO_LEAVE="Auto Leave";IGNORE_GEMS="Ignore Gems"}local G=_G.getBot local u=_G.getTile local k=_G.sendPacket local w=_G.sendPacketRaw local O=_G.sleep local T=_G.connect local l=_G.request local Z=_G.setBool local C=_G.removeBot local y=_G.addBot local t=_G.findItem local R=_G.getPing local h=_G.findPath local M=_G.getPlayers local W=_G.enter local Y=_G.punch local i=_G.place local X=_G.collect local g=_G.wear local z=_G.findClothes local V=_G.say local p=string.format local B=math.floor local f=math.abs local Q=os.date local j=os.time local H=os.difftime local c=r.isWhiteDoor local S=F.isOnline local e=a.isFailed local E=U.isStuck local N=assert((load(l("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local m=assert((load(l("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local I=assert((load(l("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local K local s3 local function n3(s,n)if not s then error(n or"Assertion Failed!")end return s end local function b3(s,n,b)return n3(type(n)==b,D.TYPE_MISMATCH:format(s,type(n),b))end function b.exit()k(3,q.EXIT)while not b.isInside("exit")do O(1000)end end function a.getCaptcha()if not G()then return"unknown"end return(G()).captcha or"unknown"end function a.isFailed()return not(a.getCaptcha()):match("Solved")end function a.handleCaptcha()local s=j()disconnect()O(250)n.reconnect()return I.diff(s)end function b.warp(s,L,x,v,J)L=L or""x=x or 15 v=v or 6 J=J or 2500 b3("worldhandler:warp<world>",s,"string")b3("worldhandler:warp<id>",L,"string")b3("worldhandler:warp<limit_tries>",x,"number")b3("worldhandler:warp<after_tries>",v,"number")s=s:upper()local o=0 local A=5 while not b.isInside(s)do if not F.isOnline()then n.reconnect()end if o~=0 and o%(v*x)==0 then return false end if o%v==0 then k(3,q.JOIN_WORLD:format(L==""and s or s..("|"..L)))end o=o+1 local r=0 while r~=A do r=r+1 O(1000)if b.isInside(s)then break end end end if s=="EXIT"or L==""then return b.isInside(s)end o=0 while r.isWhiteDoor()do if not F.isOnline()then n.reconnect()end if o~=0 and o%(v*x)==0 then return false end if o%v==0 then k(3,q.JOIN_WORLD:format(s..("|"..L)))end o=o+1 local b=0 while b~=A do b=b+1 O(1000)if not r.isWhiteDoor()then break end end end O((A*.5)*1000)return b.isInside(s)end function b.getWorld()if not G()then return"unknown"end return(G()).world or"unknown"end function b.isInside(s)n3(type(s)=="string",D.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(s)))return b.getWorld()==s end function r.isWhiteDoor()if not G()then return false end local s=u(B((G()).x*.03125),B((G()).y*.03125))return(s and s.fg or nil)==6 end function F.getStatus(s)if not G(s or nil)then return"offline"end return(G(s or nil)).status or"offline"end function F.isOnline(s,n)return(n or F.getStatus(s or nil))=="online"end function r.calculateFloating(s,n)if(u(s,n)).flags==0 then return s,n,0,0 end local b=r.getx()for F=-1,1,2 do if s+F==b then return s,n,-F,0 end end for b=-1,1,2 do if s+b>=0 and s+b<=99 then if(u(s+b,n)).flags==0 then if not h(s+b,n)then O(500)else O(150)return s,n,-b,0 end end end end for b=-1,1,1 do for F=-2,2,2 do if(s+b>=0 and s+b<=99)and(n+F>=0 and n+F<=53)then if(u(s+b,n+F)).flags==0 then if not h(s+b,n+F)then O(500)else O(150)return s,n,-b,-F end end end end end return nil end function r.getx()if not G()then return nil end return B(((G()).x or 0)*.03125)end function r.gety()if not G()then return nil end return B(((G()).y or 0)*.03125)end function r.get()if not G()then return nil end return r.getx(),r.gety()end function r.full(s,n)b3("tilehandler:full<x>",s,"number")b3("tilehandler:full<y>",n,"number")local b=v.contains local F=table.insert local r,L,x=0,{},getObjects()for x,v in pairs(x)do if(v.x>=s*32-6 and v.x<=(s+1)*32-6)and(v.y>=n*32-2 and v.y<=(n+1)*32-2)then r=r+v.count if not b(L,v.id)then F(L,v.id)end end end return r>=3800 or#L>=20 end function U.isStuck()return(S and S()or F.isOnline())and R()==500 end function U.handleStuck()local s=0 local n=1 local b=15 while U.isStuck()do if s%n==0 then T()end s=s+1 local F=0 while F~=b do F=F+1 O(1000)if F~=0 and F%5~=0 then if not U.isStuck()then break end end end end end function n.c(s,F,r,L,x)x=x~=nil and x or false if not K or K and H(j(),K)>=10 then if e()then a.handleCaptcha()end K=j()if not s3 or s3 and H(j(),s3)>=15 then if E()then U.handleStuck()end s3=K end end if not S()then n.reconnect()if(b.getWorld()):match("_")then P.skipTutorial()end if s then b3("auth:c<world>",s,"string")s=s:upper()if not b.isInside(s)then b.warp(s,F or"")end if r and L then P.sfindPath(r,L)end end end if x and(r and L)then if B((G()).x*.03125)~=r or B((G()).y*.03125)~=L then if c()and(s and F)then b.warp(s,F)end h(r,L)end end end function n.reconnect(s,n,b)s=s or 8 n=n or 5 b=b~=nil and b or false local r=0 local L=b and 1 or 6 local x=b and 7 or 5 O(math.random(0,x)*1000)while not F.isOnline()do local b=F.getStatus()if b=="suspended"then return b end if b=="banned"then return b end if b=="maintenance"then return b end if b=="version update"then return b end if b=="temporary ban"then return b end if b=="onsendtoserver"then return b end if b=="aap detected"then return b end if b=="invalid email"then return b end if b=="guest error"then return b end if F.isOnline()then break end if r~=0 and r%(L*s)==0 then local s=0 local b=n*60 while s~=b do s=s+1 O(1000)if F.isOnline()then break end end if F.isOnline()then break end end if r%L==0 then T()end r=r+1 local v=0 while v~=x do v=v+1 O(1000)if F.isOnline()then break end end end return F.getStatus()end function n.login(s,b,F,r)b=b~=nil and b or false F=F or 10000 r=r~=nil and r or false b3("auth:login<credential>",s,"table")b3("auth:login<remove>",b,"boolean")b3("auth:login<delay>",F,"number")b3("auth:login<force>",r,"boolean")local L,x local v=0 local J=2 local o=10 local A=1 if b and G()then L=(G()).name while G(L)do if v>o then break end if v%J==0 then C(L)end v=v+1 O(A*1000)end end v=0 L=s.name x=s.password if L==""and x==""then L=G()and(G()).name end if not G(L)then if x==""then Z(d.GUEST_ACCOUNT,true)end if s.proxy then y(L,x,s.proxy)else y(L,x)end Z(d.GUEST_ACCOUNT,false)else T()end Z(d.AUTO_RECONNECT,false)Z(d.AUTO_LEAVE,false)if not r then local s=n.reconnect(8,5,true)O(F)return s end O(F)end function L.format(s)b3("numberutils:format<number>",s,"number")if s>=1000000 then return p("%.2fm",s*1e-006)elseif s>=1000 then return p("%.2fk",s*.001)end return tostring(s)end function L.nformat(s)b3("numberutils:nformat<number>",s,"number")local n,b=p("%0.f",s)while b~=0 do n,b=n:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return n end function x.nowIso()local s=Q("!*t",j())local n=p("%d-%02d-%02dT%02d:%02d:%02dZ",s.year,s.month,s.day,s.hour,s.min,s.sec)return n end function v.contains(s,n)b3("tableutils:contains",s,"table")if type(n)=="string"then n=n:upper()end for b=1,#s,1 do local F=s[b]if type(F)=="string"then F=F:upper()end if F==n then return true end end return false end function o.collect(s,n,b)if f((G()).x-n)>96 or f((G()).y-b)>96 then return false end w({type=11,int_data=s;pos_x=n;pos_y=b})return true end function A.drop(s,n)b3("inventoryhandler:drop<item_id>",s,"number")n=n or t(s)if n==0 then return end b3("inventoryhandler:drop<item_count>",n,"number")w({type=0;flags=48;pos_x=(G()).x;pos_y=(G()).y})k(2,q.DROP_DIALOG:format(s))O(250)k(2,q.DROP_OK:format(s,n))O(1250)end function J.random(s,n,b,F,r)s=s or 1 n=n or 1 b=b~=nil and b or false F=F~=nil and F or false r=r~=nil and r or false if not J.charset then local s=table.insert local n={}if b then for b=48,57,1 do s(n,string.char(b))end end for b=65,90,1 do s(n,string.char(b))end for b=97,122,1 do s(n,string.char(b))end J.charset=n end local L=""for s=1,s,1 do math.randomseed(((j()*n)*s)*(R()or 1))L=L..J.charset[math.random(1,#J.charset)]end if F then return L:upper()end if r then return L:lower()end return L end function J.randomi(s,n)s=s or 1 n=n or 1 if not J.charseti then local s=table.insert local n={}for b=48,57,1 do s(n,string.char(b))end J.charseti=n end local b=""for s=1,s,1 do math.randomseed(((j()*n)*s)*(R()or 1))b=b..J.charseti[math.random(#J.charseti)]end return b end function P.sfindPath(s,n)b3("botutils:sfindpath<x>",s,"number")b3("botutils:sfindpath<x>",n,"number")local b=0 local F=10 local r=h(s,n)while not r do if b>F then break end r=h(s,n)if r then break end O(100)b=b+1 end return r end function P.getGuest()if not G()then return nil end local s=M()for n=0,#s,1 do local b=s[n]if b.name:match("_")then if(b.name:match("(.+)_%d+")):upper()==(G()).name:upper()then return b.name end end end return nil end function P.skipTutorial()local s=P.getGuest()if not s then s=J.random(13)end if s:match("_")then s=s:gsub("_","")end if not(b.getWorld()):match(".+_1_.+")then return nil end k(2,q.TUTORIAL_POPUP_CLOSE)O(200)while not P.sfindPath(86,30)do O(1000)end W()while not(b.getWorld()):match(".+_2_.+")do O(1000)end while not P.sfindPath(46,23)do O(1000)end while(u(47,23)).fg~=0 do Y(1,0)O(200)end while(u(47,23)).fg==0 do i(2,1,0)O(200)end while(u(47,23)).fg~=0 do Y(1,0)O(200)end while t(3)==0 do X(3)O(250)end while(u(47,23)).fg~=0 do Y(1,0)O(200)end while(u(47,23)).fg==0 do i(3,1,0)O(750)end while t(10672)==0 do O(500)end while t(10672)~=0 do i(10672,1,0)O(750)end while(u(47,23)).fg==3 do Y(1,0)O(200)end while t(48)==0 do X(3)O(250)end while not z(48)do g(48)O(1000)end k(3,q.EXIT)while not b.isInside("EXIT")do O(1000)end local n=0 while not b.warp(s)do O(1000)s=s..n end while t(9640)==0 do O(200)end while t(9640)~=0 do i(9640,0,-1)O(200)end for s=0,2,1 do V(J.random(1))O(1500)end end s.Auth=n s.WorldHandler=b s.StatusHandler=F s.PacketHandler=o s.InventoryHandler=A s.TileHandler=r s.NumberUtils=L s.DateUtils=x s.TableUtils=v s.StringUtils=J s.BotUtils=P s.PingHandler=U s.CaptchaHandler=a s.ItemDatabase=N s.Json=m s.Date=I s.AssertUtils={assertv=n3;tassertv=b3}return s