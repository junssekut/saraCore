local k={_VERSION="0.1.6";_AUTHOR="junssekut#4964",_CONTRIBUTORS={}}local V={}local E={}local m={}local K={}local R={}local q={}local C={}local f={}local A={}local w={}local o={}local s={}local O={}local Q={VALUE_MISMATCH="[%s] got: %s",TYPE_MISMATCH="[%s] got: %s, expected: %s"}local U={JOIN_WORLD="action|join_request\nname|%s\ninvitedWorld|0";DROP_DIALOG="action|drop\n|itemID|%d",DROP_OK="action|dialog_return\ndialog_name|drop_item\nitemID|%d|\ncount|%d";EXIT="action|quit_to_exit";TUTORIAL_POPUP_CLOSE="ftue_start_popup_close";TAKE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|pullstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1";INSERT_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nstockitem|%d",UPDATE_VEND="action|dialog_return\ndialog_name|vending\ntilex|%d|\ntiley|%d|\nbuttonClicked|addstock\n\nsetprice|0\nchk_peritem|0\nchk_perlock|1"}local S={SELECT_ALL="Select All";GUEST_ACCOUNT="Guest Account",EXTERNAL="External";AUTO_ACCESS="Auto Access";AUTO_RECONNECT="Auto Reconnect";AUTO_LEAVE="Auto Leave",IGNORE_GEMS="Ignore Gems"}local g=_G.getBot local z=_G.getTile local t=_G.sendPacket local Z=_G.sendPacketRaw local F=_G.sleep local b=_G.connect local Y=_G.request local P=_G.setBool local r=_G.removeBot local I=_G.addBot local h=_G.findItem local H=_G.getPing local L=_G.findPath local e=_G.getPlayers local N=_G.enter local T=_G.punch local X=_G.place local D=_G.collect local i=_G.wear local c=_G.findClothes local v=_G.say local n=string.format local a=math.floor local p=math.abs local l=os.date local x=os.time local M=os.difftime local d=K.isWhiteDoor local u=m.isOnline local j=O.isFailed local y=s.isStuck local J=assert((load(Y("GET","https://raw.githubusercontent.com/junssekut/saraItemDatabase/main/ItemDatabase.lua")))())local B=assert((load(Y("GET","https://raw.githubusercontent.com/rxi/json.lua/master/json.lua")))())local W=assert((load(Y("GET","https://raw.githubusercontent.com/Tieske/date/master/src/date.lua")))())local G local kB local function VB(k,V)if not k then error(V or"Assertion Failed!")end return k end local function EB(k,V,E)return VB(type(V)==E,Q.TYPE_MISMATCH:format(k,type(V),E))end function E.exit()t(3,U.EXIT)while not E.isInside("exit")do F(1000)end end function O.getCaptcha()if not g()then return"unknown"end return(g()).captcha or"unknown"end function O.isFailed()return not(O.getCaptcha()):match("Solved")end function O.handleCaptcha()local k=x()disconnect()F(250)V.reconnect()return W.diff(k)end function E.warp(k,R,q,C,f)R=R or""q=q or 15 C=C or 6 f=f or 2500 EB("worldhandler:warp<world>",k,"string")EB("worldhandler:warp<id>",R,"string")EB("worldhandler:warp<limit_tries>",q,"number")EB("worldhandler:warp<after_tries>",C,"number")k=k:upper()local A=0 local w=5 while not E.isInside(k)do if not m.isOnline()then V.reconnect()end if A~=0 and A%(C*q)==0 then return false end if A%C==0 then t(3,U.JOIN_WORLD:format(R==""and k or k..("|"..R)))end A=A+1 local K=0 while K~=w do K=K+1 F(1000)if E.isInside(k)then break end end end if k=="EXIT"or R==""then return E.isInside(k)end A=0 while K.isWhiteDoor()do if not m.isOnline()then V.reconnect()end if A~=0 and A%(C*q)==0 then return false end if A%C==0 then t(3,U.JOIN_WORLD:format(k..("|"..R)))end A=A+1 local E=0 while E~=w do E=E+1 F(1000)if not K.isWhiteDoor()then break end end end F((w*.5)*1000)return E.isInside(k)end function E.getWorld()if not g()then return"unknown"end return(g()).world or"unknown"end function E.isInside(k)VB(type(k)=="string",Q.VALUE_MISMATCH:format("worldhandler:isinside<world>",type(k)))return E.getWorld()==k end function K.isWhiteDoor()if not g()then return false end local k=z(a((g()).x*.03125),a((g()).y*.03125))return(k and k.fg or nil)==6 end function m.getStatus(k)if not g(k or nil)then return"offline"end return(g(k or nil)).status or"offline"end function m.isOnline(k,V)return(V or m.getStatus(k or nil))=="online"end function K.calculateFloating(k,V)if(z(k,V)).flags==0 then return k,V,0,0 end local E=K.getx()for m=-1,1,2 do if k+m==E then return k,V,-m,0 end end for E=-1,1,2 do if k+E>=0 and k+E<=99 then if(z(k+E,V)).flags==0 then if not L(k+E,V)then F(500)else F(150)return k,V,-E,0 end end end end for E=-1,1,1 do for m=-2,2,2 do if(k+E>=0 and k+E<=99)and(V+m>=0 and V+m<=53)then if(z(k+E,V+m)).flags==0 then if not L(k+E,V+m)then F(500)else F(150)return k,V,-E,-m end end end end end return nil end function K.getx()if not g()then return nil end return a(((g()).x or 0)*.03125)end function K.gety()if not g()then return nil end return a(((g()).y or 0)*.03125)end function K.get()if not g()then return nil end return K.getx(),K.gety()end function K.full(k,V)EB("tilehandler:full<x>",k,"number")EB("tilehandler:full<y>",V,"number")local E=C.contains local m=table.insert local K,R,q=0,{},getObjects()for q,C in pairs(q)do if(C.x>=k*32-6 and C.x<=(k+1)*32-6)and(C.y>=V*32-2 and C.y<=(V+1)*32-2)then K=K+C.count if not E(R,C.id)then m(R,C.id)end end end return K>=3800 or#R>=20 end function s.isStuck()if not u then u=m.isOnline end return(u and u()or m.isOnline())and H()==500 end function s.handleStuck()local k=0 local V=1 local E=15 while s.isStuck()do if k%V==0 then b()end k=k+1 local m=0 while m~=E do m=m+1 F(1000)if m~=0 and m%5~=0 then if not s.isStuck()then break end end end end end function V.c(k,R,q,C,f)f=f~=nil and f or false if not G or G and M(x(),G)>=10 then if not j then j=O.isFailed end if j()then O.handleCaptcha()end G=x()if not kB or kB and M(x(),kB)>=15 then if not y then y=s.isStuck end if y()then s.handleStuck()end kB=G end end if not u then u=m.isOnline end if not u()then V.reconnect()if(E.getWorld()):match("_")then o.skipTutorial()end if k then EB("auth:c<world>",k,"string")k=k:upper()if not E.isInside(k)then E.warp(k,R or"")end if q and C then o.sfindPath(q,C)end end end if f and(q and C)then if a((g()).x*.03125)~=q or a((g()).y*.03125)~=C then if not d then d=K.isWhiteDoor end if d()and(k and R)then E.warp(k,R)end L(q,C)end end end function V.reconnect(k,V,E)k=k or 8 V=V or 5 E=E~=nil and E or false local K=0 local R=E and 1 or 6 local q=E and 7 or 5 F(math.random(0,q)*1000)while not m.isOnline()do local E=m.getStatus()if E=="suspended"then return E end if E=="banned"then return E end if E=="maintenance"then return E end if E=="version update"then return E end if E=="temporary ban"then return E end if E=="onsendtoserver"then return E end if E=="aap detected"then return E end if E=="invalid email"then return E end if E=="guest error"then return E end if m.isOnline()then break end if K~=0 and K%(R*k)==0 then local k=0 local E=V*60 while k~=E do k=k+1 F(1000)if m.isOnline()then break end end if m.isOnline()then break end end if K%R==0 then b()end K=K+1 local C=0 while C~=q do C=C+1 F(1000)if m.isOnline()then break end end end return m.getStatus()end function V.login(k,E,m,K)E=E~=nil and E or false m=m or 10000 K=K~=nil and K or false EB("auth:login<credential>",k,"table")EB("auth:login<remove>",E,"boolean")EB("auth:login<delay>",m,"number")EB("auth:login<force>",K,"boolean")local R,q local C=0 local f=2 local A=10 local w=1 if E and g()then R=(g()).name while g(R)do if C>A then break end if C%f==0 then r(R)end C=C+1 F(w*1000)end end C=0 R=k.name q=k.password if R==""and q==""then R=g()and(g()).name end if not g(R)then if q==""then P(S.GUEST_ACCOUNT,true)end if k.proxy then I(R,q,k.proxy)else I(R,q)end P(S.GUEST_ACCOUNT,false)else b()end P(S.AUTO_RECONNECT,false)P(S.AUTO_LEAVE,false)if not K then local k=V.reconnect(8,5,true)F(m)return k end F(m)end function R.format(k)EB("numberutils:format<number>",k,"number")if k>=1000000 then return n("%.2fm",k*1e-006)elseif k>=1000 then return n("%.2fk",k*.001)end return tostring(k)end function R.nformat(k)EB("numberutils:nformat<number>",k,"number")local V,E=n("%0.f",k)while E~=0 do V,E=V:gsub("^(%-?%d+)(%d%d%d)","%1.%2")end return V end function q.nowIso()local k=l("!*t",x())local V=n("%d-%02d-%02dT%02d:%02d:%02dZ",k.year,k.month,k.day,k.hour,k.min,k.sec)return V end function C.contains(k,V)EB("tableutils:contains",k,"table")if type(V)=="string"then V=V:upper()end for E=1,#k,1 do local m=k[E]if type(m)=="string"then m=m:upper()end if m==V then return true end end return false end function A.collect(k,V,E)if p((g()).x-V)>96 or p((g()).y-E)>96 then return false end Z({type=11,int_data=k,pos_x=V;pos_y=E})return true end function A.tvend(k,V)wrench(0,0)F(200)t(2,U.TAKE_VEND:format(k,V))F(1500)end function A.vend(k,V,E)wrench(0,0)F(200)if(z(V,E)).data==0 then t(2,U.INSERT_VEND:format(V,E,k))else t(2,U.UPDATE_VEND:format(V,E))end F(1500)end function w.drop(k,V)EB("inventoryhandler:drop<item_id>",k,"number")V=V or h(k)if V==0 then return end EB("inventoryhandler:drop<item_count>",V,"number")Z({type=0;flags=48;pos_x=(g()).x,pos_y=(g()).y})t(2,U.DROP_DIALOG:format(k))F(250)t(2,U.DROP_OK:format(k,V))F(1250)end function f.random(k,V,E,m,K)k=k or 1 V=V or 1 E=E~=nil and E or false m=m~=nil and m or false K=K~=nil and K or false if not f.charset then local k=table.insert local V={}if E then for E=48,57,1 do k(V,string.char(E))end end for E=65,90,1 do k(V,string.char(E))end for E=97,122,1 do k(V,string.char(E))end f.charset=V end local R=""for k=1,k,1 do math.randomseed(((x()*V)*k)*(H()or 1))R=R..f.charset[math.random(1,#f.charset)]end if m then return R:upper()end if K then return R:lower()end return R end function f.randomi(k,V)k=k or 1 V=V or 1 if not f.charseti then local k=table.insert local V={}for E=48,57,1 do k(V,string.char(E))end f.charseti=V end local E=""for k=1,k,1 do math.randomseed(((x()*V)*k)*(H()or 1))E=E..f.charseti[math.random(#f.charseti)]end return E end function o.sfindPath(k,V)EB("botutils:sfindpath<x>",k,"number")EB("botutils:sfindpath<x>",V,"number")local E=0 local m=10 local K=L(k,V)while not K do if E>m then break end K=L(k,V)if K then break end F(100)E=E+1 end return K end function o.getGuest()if not g()then return nil end local k=e()for V=0,#k,1 do local E=k[V]if E.name:match("_")then if(E.name:match("(.+)_%d+")):upper()==(g()).name:upper()then return E.name end end end return nil end function o.skipTutorial()local k=o.getGuest()if not k then k=f.random(13)end if k:match("_")then k=k:gsub("_","")end if not(E.getWorld()):match(".+_1_.+")then return nil end t(2,U.TUTORIAL_POPUP_CLOSE)F(200)while not o.sfindPath(86,30)do F(1000)end N()while not(E.getWorld()):match(".+_2_.+")do F(1000)end while not o.sfindPath(46,23)do F(1000)end while(z(47,23)).fg~=0 do T(1,0)F(200)end while(z(47,23)).fg==0 do X(2,1,0)F(200)end while(z(47,23)).fg~=0 do T(1,0)F(200)end while h(3)==0 do D(3)F(250)end while(z(47,23)).fg~=0 do T(1,0)F(200)end while(z(47,23)).fg==0 do X(3,1,0)F(750)end while h(10672)==0 do F(500)end while h(10672)~=0 do X(10672,1,0)F(750)end while(z(47,23)).fg==3 do T(1,0)F(200)end while h(48)==0 do D(3)F(250)end while not c(48)do i(48)F(1000)end t(3,U.EXIT)while not E.isInside("EXIT")do F(1000)end local V=0 while not E.warp(k)do F(1000)k=k..V end while h(9640)==0 do F(200)end while h(9640)~=0 do X(9640,0,-1)F(200)end for k=0,2,1 do v(f.random(1))F(1500)end end k.Auth=V k.WorldHandler=E k.StatusHandler=m k.PacketHandler=A k.InventoryHandler=w k.TileHandler=K k.NumberUtils=R k.DateUtils=q k.TableUtils=C k.StringUtils=f k.BotUtils=o k.PingHandler=s k.CaptchaHandler=O k.ItemDatabase=J k.Json=B k.Date=W k.AssertUtils={assertv=VB;tassertv=EB}return k